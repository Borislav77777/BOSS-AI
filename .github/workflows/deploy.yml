name: BOSS AI v2.0 - Deploy to Production

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞
  quality-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run ESLint
        run: |
          cd frontend
          npm run lint

      - name: Run TypeScript check
        run: |
          cd frontend
          npm run type-check

      - name: Check for console.log statements
        run: |
          if grep -r "console\.log" frontend/src/ --exclude-dir=node_modules; then
            echo "‚ùå Found console.log statements in production code"
            exit 1
          else
            echo "‚úÖ No console.log statements found"
          fi

  # –°–±–æ—Ä–∫–∞ frontend
  build-frontend:
    runs-on: ubuntu-latest
    needs: quality-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Check build output
        run: |
          if [ ! -d "frontend/dist" ]; then
            echo "‚ùå Build failed - dist directory not found"
            exit 1
          fi

          if [ ! -f "frontend/dist/index.html" ]; then
            echo "‚ùå Build failed - index.html not found"
            exit 1
          fi

          echo "‚úÖ Build successful"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 7

  # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
  test-services:
    runs-on: ubuntu-latest
    needs: quality-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Node.js dependencies
        run: |
          cd backend/services/image-processing
          npm ci

      - name: Install Python dependencies
        run: |
          cd backend/services/image-processing
          pip install -r requirements.txt

      - name: Test Image Processing Service
        run: |
          cd backend/services/image-processing
          # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –≤ —Ñ–æ–Ω–µ
          npm start &
          SERVICE_PID=$!

          # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
          sleep 10

          # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
          curl -f http://localhost:3005/api/status || exit 1

          # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
          kill $SERVICE_PID

  # –î–µ–ø–ª–æ–π –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-frontend, test-services]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to server
        run: |
          # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
          TEMP_DIR="/tmp/boss-ai-deploy-$(date +%s)"

          # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä
          scp -o StrictHostKeyChecking=no -r frontend/dist/* ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:$TEMP_DIR/

          # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–ø–ª–æ–π
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
            BACKUP_DIR="/var/www/boss-ai/backup-$(date +%Y%m%d-%H%M%S)"
            mkdir -p "$BACKUP_DIR"
            cp -r /var/www/boss-ai/frontend/dist/* "$BACKUP_DIR/" 2>/dev/null || true

            # –ö–æ–ø–∏—Ä—É–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
            cp -r $TEMP_DIR/* /var/www/boss-ai/frontend/dist/

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            chown -R www-data:www-data /var/www/boss-ai/frontend/dist/
            chmod -R 755 /var/www/boss-ai/frontend/dist/

            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º Nginx
            systemctl reload nginx

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
            if systemctl is-active --quiet nginx; then
              echo "‚úÖ Nginx –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ"
            else
              echo "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ Nginx"
              exit 1
            fi

            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            rm -rf $TEMP_DIR

            echo "üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
          EOF

      - name: Verify deployment
        run: |
          # –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          sleep 10

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞
          curl -f https://boss-ai.online || exit 1

          echo "‚úÖ –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è"

  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
      - name: Notify on success
        if: needs.deploy-production.result == 'success'
        run: |
          echo "üéâ BOSS AI v2.0 —É—Å–ø–µ—à–Ω–æ –∑–∞–¥–µ–ø–ª–æ–µ–Ω!"
          echo "–°–∞–π—Ç: https://boss-ai.online"
          echo "–í—Ä–µ–º—è: $(date)"

      - name: Notify on failure
        if: needs.deploy-production.result == 'failure'
        run: |
          echo "‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è BOSS AI v2.0"
          echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π"
          echo "–í—Ä–µ–º—è: $(date)"

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ workflow –¥–ª—è —Ä—É—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∫–æ–Ω–æ–∫
  process-icons:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Process icons on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            cd /var/www/boss-ai
            chmod +x scripts/process-icons.sh
            ./scripts/process-icons.sh
          EOF

  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞
  setup-image-service:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Setup Image Processing Service
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            cd /var/www/boss-ai
            chmod +x scripts/setup-image-service.sh
            sudo ./scripts/setup-image-service.sh
          EOF
