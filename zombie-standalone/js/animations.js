/**
 * BOSS AI Animations
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ 3D —Å—Ü–µ–Ω—ã
 */

class BossAIAnimations {
    constructor(scene, logoMesh) {
        this.scene = scene;
        this.logoMesh = logoMesh;
        this.energyRings = null; // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑–≤–Ω–µ
        this.animations = {};
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∞–Ω–∏–º–∞—Ü–∏–π
     */
    init() {
        console.log('üöÄ Initializing animations...');

        this.startRotationAnimation();
        this.startPulseAnimation();
        this.startWaveAnimation();
        this.startFadeInAnimation();
        this.startScaleAnimation();

        console.log('‚úì Animations initialized');
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
     */
    startRotationAnimation() {
        if (!BOSS_AI_CONFIG.animations.rotation.enabled) return;

        const config = BOSS_AI_CONFIG.animations.rotation;

        this.scene.onBeforeRenderObservable.add(() => {
            if (this.logoMesh) {
                switch(config.axis) {
                    case 'x':
                        this.logoMesh.rotation.x += config.speed;
                        break;
                    case 'y':
                        this.logoMesh.rotation.y += config.speed;
                        break;
                    case 'z':
                        this.logoMesh.rotation.z += config.speed;
                        break;
                }
            }
        });

        console.log('‚úì Rotation animation started');
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –ø—É–ª—å—Å–∞—Ü–∏–∏ (—ç—Ñ—Ñ–µ–∫—Ç "–¥—ã—Ö–∞–Ω–∏—è")
     */
    startPulseAnimation() {
        if (!BOSS_AI_CONFIG.animations.pulse.enabled) return;

        const config = BOSS_AI_CONFIG.animations.pulse;
        const startTime = Date.now();

        this.animations.pulse = () => {
            const elapsed = Date.now() - startTime;
            const progress = (elapsed % config.duration) / config.duration;

            // –°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω–∞—è –ø—É–ª—å—Å–∞—Ü–∏—è
            const intensity = config.minIntensity +
                (config.maxIntensity - config.minIntensity) *
                (Math.sin(progress * Math.PI * 2) * 0.5 + 0.5);

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º
            this.logoMesh.getChildMeshes().forEach(mesh => {
                if (mesh.material && mesh.material.emissiveIntensity !== undefined) {
                    mesh.material.emissiveIntensity = intensity;
                }
            });
        };

        this.scene.registerBeforeRender(this.animations.pulse);
        console.log('‚úì Pulse animation started');
    }

    /**
     * –í–æ–ª–Ω–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç
     */
    startWaveAnimation() {
        if (!BOSS_AI_CONFIG.animations.wave.enabled) return;

        const config = BOSS_AI_CONFIG.animations.wave;
        const startTime = Date.now();

        this.animations.wave = () => {
            const elapsed = Date.now() - startTime;
            const time = elapsed * 0.001; // –í —Å–µ–∫—É–Ω–¥—ã

            // –í–æ–ª–Ω–æ–≤–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
            const waveOffset = Math.sin(time * config.frequency) * config.amplitude;

            if (this.logoMesh) {
                switch(config.direction) {
                    case 'horizontal':
                        this.logoMesh.position.x = waveOffset;
                        break;
                    case 'vertical':
                        this.logoMesh.position.y = waveOffset;
                        break;
                    case 'depth':
                        this.logoMesh.position.z = waveOffset;
                        break;
                }
            }
        };

        this.scene.registerBeforeRender(this.animations.wave);
        console.log('‚úì Wave animation started');
    }

    /**
     * –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ (fade-in)
     */
    startFadeInAnimation() {
        if (!BOSS_AI_CONFIG.animations.fadeIn.enabled) return;

        const config = BOSS_AI_CONFIG.animations.fadeIn;
        const startTime = Date.now();

        this.animations.fadeIn = () => {
            const elapsed = Date.now() - startTime;
            const progress = Math.min(elapsed / config.duration, 1);

            // –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ
            this.logoMesh.getChildMeshes().forEach(mesh => {
                if (mesh.material) {
                    mesh.material.alpha = progress;
                }
            });

            // –£–¥–∞–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            if (progress >= 1) {
                this.scene.unregisterBeforeRender(this.animations.fadeIn);
                delete this.animations.fadeIn;
                console.log('‚úì Fade-in complete');
            }
        };

        this.scene.registerBeforeRender(this.animations.fadeIn);
        console.log('‚úì Fade-in animation started');
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –ø—É–ª—å—Å–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ (–¥—ã—Ö–∞–Ω–∏–µ)
     */
    startScaleAnimation() {
        if (!BOSS_AI_CONFIG.animations.scale.enabled) return;

        const config = BOSS_AI_CONFIG.animations.scale;

        this.scene.onBeforeRenderObservable.add(() => {
            const time = Date.now() / config.duration;
            const scale = config.minScale +
                (config.maxScale - config.minScale) *
                (Math.sin(time * Math.PI * 2) * 0.5 + 0.5);

            if (this.logoMesh) {
                this.logoMesh.scaling = new BABYLON.Vector3(scale, scale, scale);
            }
        });

        console.log('‚úì Scale animation started');
    }


    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
     */
    stopAnimation(name) {
        if (this.animations[name]) {
            this.scene.unregisterBeforeRender(this.animations[name]);
            delete this.animations[name];
            console.log(`‚úì Animation "${name}" stopped`);
        }
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞–Ω–∏–º–∞—Ü–∏–π
     */
    stopAll() {
        Object.keys(this.animations).forEach(name => {
            this.stopAnimation(name);
        });
        console.log('‚úì All animations stopped');
    }

    /**
     * –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
     */
    resumeAnimation(name) {
        switch(name) {
            case 'rotation':
                if (!this.animations.rotation) this.startRotationAnimation();
                break;
            case 'pulse':
                if (!this.animations.pulse) this.startPulseAnimation();
                break;
            case 'wave':
                if (!this.animations.wave) this.startWaveAnimation();
                break;
        }
    }

    /**
     * –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
     */
    setSpeed(multiplier) {
        BOSS_AI_CONFIG.animations.rotation.speed *= multiplier;
        BOSS_AI_CONFIG.animations.pulse.duration /= multiplier;
        BOSS_AI_CONFIG.animations.wave.speed *= multiplier;
        console.log(`‚úì Animation speed set to ${multiplier}x`);
    }
}
