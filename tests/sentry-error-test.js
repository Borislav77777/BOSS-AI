#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç Sentry –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ custom error classes
 */

const path = require("path");
const fs = require("fs");

console.log("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Sentry –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ custom error classes...\n");

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É Sentry SDK
console.log("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Sentry SDK...");
try {
  const mainPackageJson = JSON.parse(
    fs.readFileSync("/var/www/boss-ai/backend/main/package.json", "utf8")
  );
  const ozonPackageJson = JSON.parse(
    fs.readFileSync(
      "/var/www/boss-ai/backend/ozon-manager/package.json",
      "utf8"
    )
  );

  const mainSentryInstalled =
    mainPackageJson.dependencies["@sentry/node"] ||
    mainPackageJson.dependencies["@sentry/profiling-node"];
  const ozonSentryInstalled =
    ozonPackageJson.dependencies["@sentry/node"] ||
    ozonPackageJson.dependencies["@sentry/profiling-node"];

  if (mainSentryInstalled && ozonSentryInstalled) {
    console.log("‚úÖ Sentry SDK —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –æ–±–æ–∏—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö");
  } else {
    console.log("‚ùå Sentry SDK –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
    process.exit(1);
  }
} catch (error) {
  console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ package.json:", error.message);
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã Sentry
console.log("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ Sentry...");
const sentryFiles = [
  "/var/www/boss-ai/backend/main/src/config/sentry.ts",
  "/var/www/boss-ai/backend/ozon-manager/src/config/sentry.ts",
  "/var/www/boss-ai/backend/shared/errors/app-error.ts",
];

let allFilesExist = true;
for (const file of sentryFiles) {
  if (fs.existsSync(file)) {
    console.log(`‚úÖ ${path.basename(file)} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
  } else {
    console.log(`‚ùå ${path.basename(file)} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    allFilesExist = false;
  }
}

if (!allFilesExist) {
  console.log("‚ùå –ù–µ –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã");
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤ index.ts —Ñ–∞–π–ª–∞—Ö
console.log("\n3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Sentry –≤ index.ts...");
try {
  const mainIndex = fs.readFileSync(
    "/var/www/boss-ai/backend/main/src/index.ts",
    "utf8"
  );
  const ozonIndex = fs.readFileSync(
    "/var/www/boss-ai/backend/ozon-manager/src/index.ts",
    "utf8"
  );

  const mainHasSentry =
    mainIndex.includes("initializeSentry") &&
    mainIndex.includes("sentryRequestHandler");
  const ozonHasSentry =
    ozonIndex.includes("initializeSentry") &&
    ozonIndex.includes("sentryRequestHandler");

  if (mainHasSentry) {
    console.log("‚úÖ API Gateway –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å Sentry");
  } else {
    console.log("‚ùå API Gateway –Ω–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å Sentry");
  }

  if (ozonHasSentry) {
    console.log("‚úÖ Ozon Manager –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å Sentry");
  } else {
    console.log("‚ùå Ozon Manager –Ω–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å Sentry");
  }
} catch (error) {
  console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:", error.message);
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π error middleware
console.log("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ error middleware...");
try {
  const errorMiddleware = fs.readFileSync(
    "/var/www/boss-ai/backend/main/src/middleware/error.middleware.ts",
    "utf8"
  );

  const hasSentryImport = errorMiddleware.includes("@sentry/node");
  const hasWinstonImport = errorMiddleware.includes("winston-logger");
  const hasCustomErrors = errorMiddleware.includes("AppError");
  const hasSentryCapture = errorMiddleware.includes("Sentry.captureException");

  if (
    hasSentryImport &&
    hasWinstonImport &&
    hasCustomErrors &&
    hasSentryCapture
  ) {
    console.log("‚úÖ Error middleware –æ–±–Ω–æ–≤–ª–µ–Ω —Å Sentry –∏ custom error classes");
  } else {
    console.log("‚ùå Error middleware –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω");
    console.log(`   - Sentry import: ${hasSentryImport}`);
    console.log(`   - Winston import: ${hasWinstonImport}`);
    console.log(`   - Custom errors: ${hasCustomErrors}`);
    console.log(`   - Sentry capture: ${hasSentryCapture}`);
  }
} catch (error) {
  console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ error middleware:", error.message);
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º custom error classes
console.log("\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ custom error classes...");
try {
  const appErrorFile = fs.readFileSync(
    "/var/www/boss-ai/backend/shared/errors/app-error.ts",
    "utf8"
  );

  const hasAppError = appErrorFile.includes("class AppError");
  const hasValidationError = appErrorFile.includes("class ValidationError");
  const hasNotFoundError = appErrorFile.includes("class NotFoundError");
  const hasUnauthorizedError = appErrorFile.includes("class UnauthorizedError");
  const hasForbiddenError = appErrorFile.includes("class ForbiddenError");
  const hasInternalServerError = appErrorFile.includes(
    "class InternalServerError"
  );

  if (
    hasAppError &&
    hasValidationError &&
    hasNotFoundError &&
    hasUnauthorizedError &&
    hasForbiddenError &&
    hasInternalServerError
  ) {
    console.log("‚úÖ –í—Å–µ custom error classes —Å–æ–∑–¥–∞–Ω—ã");
  } else {
    console.log("‚ùå –ù–µ –≤—Å–µ custom error classes —Å–æ–∑–¥–∞–Ω—ã");
    console.log(`   - AppError: ${hasAppError}`);
    console.log(`   - ValidationError: ${hasValidationError}`);
    console.log(`   - NotFoundError: ${hasNotFoundError}`);
    console.log(`   - UnauthorizedError: ${hasUnauthorizedError}`);
    console.log(`   - ForbiddenError: ${hasForbiddenError}`);
    console.log(`   - InternalServerError: ${hasInternalServerError}`);
  }
} catch (error) {
  console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ custom error classes:", error.message);
  process.exit(1);
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–∏–ª—è—Ü–∏—é TypeScript
console.log("\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ TypeScript...");
const { execSync } = require("child_process");

try {
  console.log("–ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º API Gateway...");
  execSync("cd /var/www/boss-ai/backend/main && npm run build", {
    stdio: "pipe",
  });
  console.log("‚úÖ API Gateway —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ");
} catch (error) {
  console.log("‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ API Gateway:", error.message);
  process.exit(1);
}

try {
  console.log("–ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º Ozon Manager...");
  execSync("cd /var/www/boss-ai/backend/ozon-manager && npm run build", {
    stdio: "pipe",
  });
  console.log("‚úÖ Ozon Manager —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ");
} catch (error) {
  console.log("‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ Ozon Manager:", error.message);
  process.exit(1);
}

console.log(
  "\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã Sentry –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ custom error classes –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!"
);
console.log("\nüìã –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:");
console.log("   ‚úÖ Sentry SDK —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –æ–±–æ–∏—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö");
console.log("   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã Sentry —Å–æ–∑–¥–∞–Ω—ã");
console.log("   ‚úÖ Sentry –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ API Gateway –∏ Ozon Manager");
console.log("   ‚úÖ Custom error classes —Å–æ–∑–¥–∞–Ω—ã");
console.log("   ‚úÖ Error middleware –æ–±–Ω–æ–≤–ª–µ–Ω —Å Sentry –∏ Winston");
console.log("   ‚úÖ TypeScript –∫–æ–¥ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω –±–µ–∑ –æ—à–∏–±–æ–∫");
console.log("\nüöÄ Error tracking —Å Sentry –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!");
