const { chromium } = require('playwright');

/**
 * –û—Ç–ª–∞–¥–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞ OpenRouter
 */
async function debugSearch() {
  console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞ OpenRouter...');

  const browser = await chromium.launch({
    headless: true, // Headless —Ä–µ–∂–∏–º –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
    slowMo: 1000
  });

  const context = await browser.newContext({
    viewport: { width: 1280, height: 720 },
    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
    ignoreHTTPSErrors: true
  });

  const page = await context.newPage();

  try {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º https://openrouter.ai/models...');
    await page.goto('https://openrouter.ai/models', {
      waitUntil: 'domcontentloaded',
      timeout: 30000
    });

    console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    await page.waitForTimeout(3000);

    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–æ –ø–æ–∏—Å–∫–∞
    await page.screenshot({ path: 'debug-before-search.png' });
    console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –¥–æ –ø–æ–∏—Å–∫–∞: debug-before-search.png');

    // –ò—â–µ–º –ø–æ–∏—Å–∫–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    const searchInput = await page.waitForSelector('input[placeholder="Filter models"]', { timeout: 10000 });
    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞');

    // –í–≤–æ–¥–∏–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫
    console.log('üîç –í–≤–æ–¥–∏–º "free"...');
    await searchInput.fill('free');
    await page.waitForTimeout(2000);

    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞
    await page.screenshot({ path: 'debug-after-search-free.png' });
    console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ "free": debug-after-search-free.png');

    // –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–¥–µ–ª–∏
    const allLinks = await page.evaluate(() => {
      const links = Array.from(document.querySelectorAll('a[href*="/models/"]'));
      return links.map(link => ({
        href: link.href,
        text: link.textContent.trim(),
        visible: link.offsetParent !== null
      }));
    });

    console.log(`üîó –ù–∞–π–¥–µ–Ω–æ ${allLinks.length} —Å—Å—ã–ª–æ–∫ –Ω–∞ –º–æ–¥–µ–ª–∏:`);
    allLinks.forEach((link, index) => {
      console.log(`  ${index + 1}. ${link.text} -> ${link.href} (–≤–∏–¥–∏–º–∞—è: ${link.visible})`);
    });

    // –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º "DeepSeek"
    const deepseekElements = await page.evaluate(() => {
      const elements = Array.from(document.querySelectorAll('*'));
      return elements
        .filter(el => el.textContent.includes('DeepSeek'))
        .map(el => ({
          tagName: el.tagName,
          text: el.textContent.trim().slice(0, 100),
          href: el.href || el.closest('a')?.href || 'no-link'
        }));
    });

    console.log(`\nüîç –ù–∞–π–¥–µ–Ω–æ ${deepseekElements.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å "DeepSeek":`);
    deepseekElements.forEach((el, index) => {
      console.log(`  ${index + 1}. <${el.tagName}> ${el.text} -> ${el.href}`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    const searchResults = await page.evaluate(() => {
      // –ò—â–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
      const containers = Array.from(document.querySelectorAll('div, section, main'));
      return containers
        .filter(container => {
          const text = container.textContent;
          return text.includes('DeepSeek') || text.includes('free') || text.includes('model');
        })
        .map(container => ({
          className: container.className,
          id: container.id,
          textLength: container.textContent.length,
          hasLinks: container.querySelectorAll('a[href*="/models/"]').length
        }));
    });

    console.log(`\nüì¶ –ù–∞–π–¥–µ–Ω–æ ${searchResults.length} –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏:`);
    searchResults.forEach((container, index) => {
      console.log(`  ${index + 1}. ${container.className} (id: ${container.id}) - ${container.textLength} —Å–∏–º–≤–æ–ª–æ–≤, ${container.hasLinks} —Å—Å—ã–ª–æ–∫`);
    });

    // –ñ–¥–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    await page.waitForTimeout(3000);

    // –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç
    await page.screenshot({ path: 'debug-final.png' });
    console.log('üì∏ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç: debug-final.png');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error);
  } finally {
    await browser.close();
  }
}

debugSearch();
