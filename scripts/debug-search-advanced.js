const { chromium } = require('playwright');

async function debugSearchAdvanced() {
  console.log('üîç –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ—Ç–ª–∞–¥–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞ OpenRouter...');

  const browser = await chromium.launch({
    headless: true,
    slowMo: 2000
  });

  const context = await browser.newContext({
    viewport: { width: 1280, height: 720 },
    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
    ignoreHTTPSErrors: true
  });

  const page = await context.newPage();

  try {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º OpenRouter...');
    await page.goto('https://openrouter.ai/models', {
      waitUntil: 'domcontentloaded',
      timeout: 60000
    });
    await page.waitForTimeout(8000);

    // –ò—â–µ–º –ø–æ–∏—Å–∫–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    const searchInput = await page.$('input[placeholder="Search"]');
    if (!searchInput) {
      console.log('‚ùå –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return;
    }

    console.log('‚úÖ –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞–π–¥–µ–Ω–∞');

    // –û—á–∏—â–∞–µ–º –∏ –≤–≤–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    await searchInput.click();
    await searchInput.fill('');
    await page.waitForTimeout(1000);

    console.log('üîç –í–≤–æ–¥–∏–º "DeepSeek"...');
    await searchInput.type('DeepSeek');
    await page.waitForTimeout(5000);

    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('‚è≥ –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...');
    await page.waitForTimeout(5000);

    // –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
    const allLinks = await page.evaluate(() => {
      const links = Array.from(document.querySelectorAll('a'));
      return links
        .filter(link => link.href && link.href.includes('/models/'))
        .map(link => ({
          href: link.href,
          text: link.textContent.trim(),
          visible: link.offsetParent !== null,
          className: link.className
        }));
    });

    console.log(`üîó –ù–∞–π–¥–µ–Ω–æ ${allLinks.length} —Å—Å—ã–ª–æ–∫ –Ω–∞ –º–æ–¥–µ–ª–∏:`);
    allLinks.forEach((link, i) => {
      console.log(`  ${i+1}. "${link.text}" -> ${link.href} (visible: ${link.visible})`);
    });

    // –ò—â–µ–º –≤ dropdown –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞
    const dropdownResults = await page.evaluate(() => {
      const dropdowns = Array.from(document.querySelectorAll('[role="listbox"], [role="menu"], .dropdown, .search-results, [class*="result"]'));
      return dropdowns.map(dropdown => ({
        tagName: dropdown.tagName,
        className: dropdown.className,
        text: dropdown.textContent.trim().substring(0, 100),
        visible: dropdown.offsetParent !== null
      }));
    });

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${dropdownResults.length} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:`);
    dropdownResults.forEach((dropdown, i) => {
      console.log(`  ${i+1}. ${dropdown.tagName}.${dropdown.className} (visible: ${dropdown.visible})`);
      console.log(`     –¢–µ–∫—Å—Ç: ${dropdown.text}...`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –º–æ–¥–µ–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const allModels = await page.evaluate(() => {
      const elements = Array.from(document.querySelectorAll('*'));
      const modelElements = elements.filter(el => {
        const text = el.textContent.toLowerCase();
        return text.includes('deepseek') || text.includes('gpt') || text.includes('llama') || text.includes('model');
      });

      return modelElements.slice(0, 10).map(el => ({
        tagName: el.tagName,
        className: el.className,
        text: el.textContent.trim().substring(0, 50)
      }));
    });

    console.log(`ü§ñ –ù–∞–π–¥–µ–Ω–æ ${allModels.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–µ–π:`);
    allModels.forEach((model, i) => {
      console.log(`  ${i+1}. ${model.tagName}.${model.className}: "${model.text}..."`);
    });

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    await page.screenshot({ path: 'debug-search-advanced.png' });
    console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: debug-search-advanced.png');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await browser.close();
  }
}

debugSearchAdvanced().catch(console.error);
