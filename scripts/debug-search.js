const { chromium } = require('playwright');

async function debugSearch() {
  console.log('üîç –û—Ç–ª–∞–¥–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞ OpenRouter...');

  const browser = await chromium.launch({
    headless: true,
    slowMo: 1000
  });

  const context = await browser.newContext({
    viewport: { width: 1280, height: 720 },
    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
    ignoreHTTPSErrors: true
  });

  const page = await context.newPage();

  try {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º OpenRouter...');
    await page.goto('https://openrouter.ai/models', {
      waitUntil: 'domcontentloaded',
      timeout: 60000
    });
    await page.waitForTimeout(5000);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
    const title = await page.title();
    console.log(`üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${title}`);

    // –ò—â–µ–º –ø–æ–∏—Å–∫–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    const searchInputs = await page.evaluate(() => {
      const inputs = Array.from(document.querySelectorAll('input'));
      return inputs.map(input => ({
        placeholder: input.placeholder,
        type: input.type,
        className: input.className,
        id: input.id
      }));
    });

    console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ input —ç–ª–µ–º–µ–Ω—Ç—ã:');
    searchInputs.forEach((input, i) => {
      console.log(`  ${i+1}. placeholder="${input.placeholder}", type="${input.type}", class="${input.className}"`);
    });

    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–∏—Å–∫–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    const searchInput = await page.$('input[placeholder*="Search"], input[placeholder*="search"], input[type="search"]');
    if (searchInput) {
      console.log('‚úÖ –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞–π–¥–µ–Ω–∞');

      // –û—á–∏—â–∞–µ–º –∏ –≤–≤–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
      await searchInput.fill('');
      await searchInput.type('DeepSeek');
      await page.waitForTimeout(3000);

      // –ò—â–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const results = await page.evaluate(() => {
        const links = Array.from(document.querySelectorAll('a[href*="/models/"]'));
        return links.map(link => ({
          href: link.href,
          text: link.textContent.trim(),
          visible: link.offsetParent !== null
        }));
      });

      console.log(`üîó –ù–∞–π–¥–µ–Ω–æ ${results.length} —Å—Å—ã–ª–æ–∫ –Ω–∞ –º–æ–¥–µ–ª–∏:`);
      results.forEach((result, i) => {
        console.log(`  ${i+1}. ${result.text} -> ${result.href} (visible: ${result.visible})`);
      });

    } else {
      console.log('‚ùå –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    await page.screenshot({ path: 'debug-openrouter.png' });
    console.log('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: debug-openrouter.png');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await browser.close();
  }
}

debugSearch().catch(console.error);
