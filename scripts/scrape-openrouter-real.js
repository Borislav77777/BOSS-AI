const fs = require('fs');
const path = require('path');

/**
 * –ù–ê–°–¢–û–Ø–©–ò–ô –ø–∞—Ä—Å–µ—Ä OpenRouter —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
 * - –ò—â–µ—Ç –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
 * - –ü–æ–ª—É—á–∞–µ—Ç –†–ï–ê–õ–¨–ù–´–ï —Å—Å—ã–ª–∫–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
 * - –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ —Å—Å—ã–ª–∫–∞–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –æ—Ç–∫—Ä—ã–ª–∞—Å—å –Ω—É–∂–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
 * - –°–æ–±–∏—Ä–∞–µ—Ç –í–°–Æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü (–Ω–µ –≤—ã–¥—É–º—ã–≤–∞–µ—Ç)
 */

// –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ (–ø–µ—Ä–≤—ã–µ 10 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
const modelsToSearch = [
  "DeepSeek V3.1",
  "Google Gemini 2.5 Flash Image Preview (Nano Banana)",
  "Meta Llama 3.3 8B Instruct",
  "Qwen Qwen3 4B",
  "Mistral Small 3.2 24B",
  "NVIDIA Nemotron Nano 12B 2 VL",
  "MiniMax MiniMax M2",
  "Nous DeepHermes 3 Llama 3 8B Preview",
  "Microsoft Phi 4 Reasoning Plus",
  "OpenAI GPT-4o-mini Search Preview"
];

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
 */
function log(message) {
  const timestamp = new Date().toISOString();
  const logMessage = `[${timestamp}] ${message}\n`;
  console.log(message);
  fs.appendFileSync('parsing-log.txt', logMessage);
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
 */
async function clearSearchInput() {
  return await page.evaluate(() => {
    const searchInput = document.querySelector('input[placeholder*="Search"], input[placeholder*="search"]');
    if (searchInput) {
      searchInput.focus();
      searchInput.value = '';
      searchInput.dispatchEvent(new Event('input', { bubbles: true }));
      searchInput.dispatchEvent(new Event('change', { bubbles: true }));
      return '–ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –æ—á–∏—â–µ–Ω–∞';
    }
    return '–ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
  });
}

/**
 * –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
 */
async function searchForModel(modelName) {
  log(`üîç –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–∏: ${modelName}`);
  
  // –û—á–∏—â–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
  await clearSearchInput();
  await page.waitForTimeout(1000);
  
  // –í–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
  const searchResult = await page.evaluate((name) => {
    const searchInput = document.querySelector('input[placeholder*="Search"], input[placeholder*="search"]');
    if (searchInput) {
      searchInput.focus();
      searchInput.value = name;
      searchInput.dispatchEvent(new Event('input', { bubbles: true }));
      searchInput.dispatchEvent(new Event('change', { bubbles: true }));
      return '–ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω';
    }
    return '–ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞';
  }, modelName);
  
  log(`   ${searchResult}`);
  
  // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  await page.waitForTimeout(3000);
  
  return searchResult;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
 */
async function getRealLinkFromSearch(modelName) {
  log(`üîó –ü–æ–∏—Å–∫ —Å—Å—ã–ª–∫–∏ –¥–ª—è: ${modelName}`);
  
  const searchResults = await page.evaluate((expectedName) => {
    // –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞
    const allLinks = Array.from(document.querySelectorAll('a[href*="/models/"]'));
    const results = [];
    
    for (const link of allLinks) {
      const href = link.getAttribute('href');
      const text = link.textContent.trim();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Å—ã–ª–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
      if (href && text && expectedName.toLowerCase().includes(text.toLowerCase().split(':')[0].trim())) {
        results.push({
          href: href.startsWith('http') ? href : `https://openrouter.ai${href}`,
          text: text,
          match: text.toLowerCase().includes(expectedName.toLowerCase().split(' ')[0])
        });
      }
    }
    
    return results;
  }, modelName);
  
  if (searchResults.length === 0) {
    log(`   ‚ùå –°—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è: ${modelName}`);
    return null;
  }
  
  // –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å—Å—ã–ª–∫—É
  const bestMatch = searchResults.find(r => r.match) || searchResults[0];
  log(`   ‚úì –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: ${bestMatch.href}`);
  
  return bestMatch.href;
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–æ–¥–µ–ª–∏
 */
async function validateModelPage(modelName) {
  log(`‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è: ${modelName}`);
  
  const validation = await page.evaluate((expectedName) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
    const url = window.location.href;
    const urlValid = url.includes('/models/') && !url.includes('404');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ H1
    const h1 = document.querySelector('h1');
    const titleValid = h1 && h1.textContent.trim().length > 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –æ—à–∏–±–æ–∫
    const hasError = document.body.textContent.includes('404') || 
                    document.body.textContent.includes('Not Found') ||
                    document.body.textContent.includes('Error');
    
    return {
      urlValid,
      titleValid,
      hasError,
      url: url,
      title: h1 ? h1.textContent.trim() : 'No title',
      valid: urlValid && titleValid && !hasError
    };
  }, modelName);
  
  if (validation.valid) {
    log(`   ‚úì –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–∞–ª–∏–¥–Ω–∞: ${validation.title}`);
  } else {
    log(`   ‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞: URL=${validation.urlValid}, Title=${validation.titleValid}, Error=${validation.hasError}`);
  }
  
  return validation;
}

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ –í–°–ï–ô –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–æ–¥–µ–ª–∏
 */
async function parseAllModelInfo() {
  log(`üìä –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã`);
  
  const modelData = await page.evaluate(() => {
    // –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
    const name = document.querySelector('h1')?.textContent.trim() || 'Unknown';
    
    // ID –∏–∑ URL
    const url = window.location.href;
    const idMatch = url.match(/\/models\/([^\/\?]+)/);
    const id = idMatch ? idMatch[1] : 'Unknown';
    
    // –ü—Ä–æ–≤–∞–π–¥–µ—Ä (–∏–∑ breadcrumbs –∏–ª–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)
    let provider = 'Unknown';
    const breadcrumbs = document.querySelectorAll('[class*="breadcrumb"], nav a');
    for (const crumb of breadcrumbs) {
      const text = crumb.textContent.trim();
      if (text && text !== name && !text.includes('Models') && !text.includes('Home')) {
        provider = text;
        break;
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ breadcrumbs, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
    if (provider === 'Unknown' && name.includes(':')) {
      provider = name.split(':')[0].trim();
    }
    
    // Context length
    const contextMatch = document.body.textContent.match(/(\d+[KMB])\s*(tokens?|context)/i);
    const context = contextMatch ? contextMatch[1] : 'Unknown';
    
    // –¶–µ–Ω—ã (–∏—â–µ–º –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö, –∫–∞—Ä—Ç–æ—á–∫–∞—Ö)
    let inputPrice = 'Unknown';
    let outputPrice = 'Unknown';
    
    const priceElements = document.querySelectorAll('td, [class*="price"], .pricing');
    for (const el of priceElements) {
      const text = el.textContent.trim();
      if (text.includes('$0/M') || text.includes('$0/')) {
        if (text.toLowerCase().includes('input') || inputPrice === 'Unknown') {
          inputPrice = text;
        }
        if (text.toLowerCase().includes('output') || outputPrice === 'Unknown') {
          outputPrice = text;
        }
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö, –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ
    if (inputPrice === 'Unknown') {
      const inputMatch = document.body.textContent.match(/input[:\s]*\$0\/M/i);
      inputPrice = inputMatch ? '$0/M' : 'Unknown';
    }
    if (outputPrice === 'Unknown') {
      const outputMatch = document.body.textContent.match(/output[:\s]*\$0\/M/i);
      outputPrice = outputMatch ? '$0/M' : 'Unknown';
    }
    
    // –û–ø–∏—Å–∞–Ω–∏–µ (–≤—Å–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã)
    const descriptionElements = document.querySelectorAll('p, .description, [class*="desc"], .content');
    const descriptions = Array.from(descriptionElements)
      .map(el => el.textContent.trim())
      .filter(text => text.length > 50 && !text.includes('$') && !text.includes('tokens'))
      .slice(0, 3); // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –æ–ø–∏—Å–∞–Ω–∏—è
    
    const description = descriptions.join(' ') || 'No description available';
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    const paramsMatch = document.body.textContent.match(/(\d+[BMK]?)\s*parameters?/i);
    const modelSize = paramsMatch ? paramsMatch[1] : null;
    
    const architectureMatch = document.body.textContent.match(/(transformer|mamba|hybrid|gpt|llama)/i);
    const architecture = architectureMatch ? architectureMatch[1] : null;
    
    const capabilities = [];
    if (document.body.textContent.toLowerCase().includes('vision')) capabilities.push('Vision');
    if (document.body.textContent.toLowerCase().includes('code')) capabilities.push('Code');
    if (document.body.textContent.toLowerCase().includes('reasoning')) capabilities.push('Reasoning');
    if (document.body.textContent.toLowerCase().includes('multimodal')) capabilities.push('Multimodal');
    
    return {
      name,
      id,
      provider,
      context,
      inputPrice,
      outputPrice,
      description,
      modelSize,
      architecture,
      capabilities: capabilities.join(', ') || 'Unknown',
      url: url
    };
  });
  
  log(`   ‚úì –°–æ–±—Ä–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${modelData.name} (${modelData.provider})`);
  return modelData;
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
function validateModelData(data) {
  const issues = [];
  
  if (!data.name || data.name === 'Unknown') issues.push('Missing name');
  if (!data.id || data.id === 'Unknown') issues.push('Missing ID');
  if (!data.provider || data.provider === 'Unknown') issues.push('Missing provider');
  if (!data.context || data.context === 'Unknown') issues.push('Missing context');
  if (!data.inputPrice || data.inputPrice === 'Unknown') issues.push('Missing input price');
  if (!data.outputPrice || data.outputPrice === 'Unknown') issues.push('Missing output price');
  if (!data.description || data.description.length < 50) issues.push('Insufficient description');
  
  if (issues.length > 0) {
    log(`   ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏: ${issues.join(', ')}`);
    return false;
  }
  
  log(`   ‚úì –î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã`);
  return true;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–¥–Ω–æ–π –º–æ–¥–µ–ª–∏
 */
async function parseModel(modelName) {
  try {
    log(`\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥: ${modelName}`);
    
    // 1. –ü–æ–∏—Å–∫ –º–æ–¥–µ–ª–∏
    await searchForModel(modelName);
    
    // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
    const realLink = await getRealLinkFromSearch(modelName);
    if (!realLink) {
      throw new Error('–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞');
    }
    
    // 3. –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ
    log(`üîó –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ: ${realLink}`);
    await page.goto(realLink, { waitUntil: 'networkidle' });
    await page.waitForTimeout(3000);
    
    // 4. –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const validation = await validateModelPage(modelName);
    if (!validation.valid) {
      throw new Error(`–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞: ${JSON.stringify(validation)}`);
    }
    
    // 5. –ü–∞—Ä—Å–∏–Ω–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    const modelData = await parseAllModelInfo();
    
    // 6. –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const isValid = validateModelData(modelData);
    if (!isValid) {
      log(`   ‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º`);
    }
    
    log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–∞: ${modelName}`);
    return modelData;
    
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ${modelName}: ${error.message}`);
    throw error;
  }
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  log('üöÄ –ó–∞–ø—É—Å–∫ –ù–ê–°–¢–û–Ø–©–ï–ì–û –ø–∞—Ä—Å–µ—Ä–∞ OpenRouter');
  log(`üìä –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${modelsToSearch.length} –º–æ–¥–µ–ª–µ–π`);
  
  // –û—á–∏—â–∞–µ–º –ª–æ–≥ —Ñ–∞–π–ª
  fs.writeFileSync('parsing-log.txt', '');
  fs.writeFileSync('failed-models.txt', '');
  
  const results = [];
  const failed = [];
  
  // –û—Ç–∫—Ä—ã–≤–∞–µ–º OpenRouter
  log('üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º OpenRouter...');
  await page.goto('https://openrouter.ai/models', { 
    waitUntil: 'domcontentloaded',
    timeout: 60000 
  });
  await page.waitForTimeout(5000);
  
  // –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å
  for (let i = 0; i < modelsToSearch.length; i++) {
    const modelName = modelsToSearch[i];
    log(`\n[${i+1}/${modelsToSearch.length}] –û–±—Ä–∞–±–æ—Ç–∫–∞: ${modelName}`);
    
    try {
      const data = await parseModel(modelName);
      results.push(data);
      log(`‚úì –£—Å–ø–µ—à–Ω–æ: ${modelName}`);
    } catch (error) {
      log(`‚úó –û—à–∏–±–∫–∞: ${modelName} - ${error.message}`);
      failed.push({ model: modelName, error: error.message });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º failed model
      fs.appendFileSync('failed-models.txt', `${modelName}: ${error.message}\n`);
    }
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    if (i < modelsToSearch.length - 1) {
      log('‚è≥ –ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã...');
      await page.waitForTimeout(3000);
    }
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  log('\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
  
  const jsonData = {
    lastUpdated: new Date().toISOString(),
    totalModels: results.length,
    failedModels: failed.length,
    models: results
  };
  
  fs.writeFileSync('openrouter-real-models.json', JSON.stringify(jsonData, null, 2));
  log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${results.length} –º–æ–¥–µ–ª–µ–π –≤ openrouter-real-models.json`);
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  log('\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
  log(`   –£—Å–ø–µ—à–Ω–æ —Å–ø–∞—Ä—Å–µ–Ω–æ: ${results.length}`);
  log(`   –û—à–∏–±–æ–∫: ${failed.length}`);
  log(`   –ü—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: ${new Set(results.map(m => m.provider)).size}`);
  
  if (failed.length > 0) {
    log('\n‚ùå Failed models:');
    failed.forEach(f => log(`   - ${f.model}: ${f.error}`));
  }
  
  log('\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!');
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Playwright
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    parseModel,
    searchForModel,
    getRealLinkFromSearch,
    validateModelPage,
    parseAllModelInfo,
    validateModelData,
    main
  };
}
