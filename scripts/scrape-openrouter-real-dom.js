const { chromium } = require('playwright');
const fs = require('fs').promises;

/**
 * –ù–ê–°–¢–û–Ø–©–ò–ô –ø–∞—Ä—Å–µ—Ä OpenRouter —á–µ—Ä–µ–∑ DOM-–ø–æ–∏—Å–∫
 * 
 * –ê–ª–≥–æ—Ä–∏—Ç–º:
 * 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –∏–∑ openrouter-all-models.json
 * 2. –î–ª—è –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏:
 *    - –û—Ç–∫—Ä—ã–≤–∞–µ–º https://openrouter.ai/models
 *    - –í–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ –ø–æ–∏—Å–∫
 *    - –ù–ê–•–û–î–ò–ú —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –≤ DOM
 *    - –ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ
 *    - –ü–†–û–í–ï–†–Ø–ï–ú —á—Ç–æ –æ—Ç–∫—Ä—ã–ª–∞—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
 *    - –ò–ó–í–õ–ï–ö–ê–ï–ú –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
 */

async function loadModelList() {
  try {
    const data = await fs.readFile('openrouter-all-models.json', 'utf8');
    const jsonData = JSON.parse(data);
    console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${jsonData.models.length} –º–æ–¥–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞`);
    return jsonData.models;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π:', error);
    return [];
  }
}

async function findRealModelLink(page, modelName) {
  try {
    console.log(`üîç –ò—â–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è: ${modelName}`);
    
    // –û—á–∏—â–∞–µ–º –ø–æ–∏—Å–∫ –∏ –≤–≤–æ–¥–∏–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    const searchInput = await page.waitForSelector('input[placeholder="Filter models"]', { timeout: 10000 });
    await searchInput.fill(''); // –û—á–∏—Å—Ç–∏—Ç—å
    await searchInput.fill(modelName);
    
    // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    await page.waitForTimeout(2000);
    
    // –ò—â–µ–º –†–ï–ê–õ–¨–ù–£–Æ —Å—Å—ã–ª–∫—É –≤ DOM
    const modelLink = await page.evaluate((name) => {
      // –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–¥–µ–ª–∏ (–∏—Å–∫–ª—é—á–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏)
      const links = Array.from(document.querySelectorAll('a[href*="openrouter.ai/"]'));
      
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${links.length} —Å—Å—ã–ª–æ–∫ –Ω–∞ OpenRouter`);
      
      for (const link of links) {
        const text = link.textContent.trim();
        const href = link.href;
        const cleanName = name.replace(' (free)', '').trim();
        
        // –ò—Å–∫–ª—é—á–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ (—Å–æ–¥–µ—Ä–∂–∞—Ç ?q=)
        if (href.includes('?q=') || href.includes('&q=')) {
          continue;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        if (text.includes(cleanName) || 
            text.includes(name) ||
            cleanName.includes(text) ||
            text.toLowerCase().includes(cleanName.toLowerCase())) {
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: "${text}" –¥–ª—è "${name}" -> ${href}`);
          return href;
        }
      }
      
      console.log(`‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è: ${name}`);
      return null;
    }, modelName);
    
    return modelLink;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–∫–∏ –¥–ª—è ${modelName}:`, error);
    return null;
  }
}

async function extractModelInfo(page, modelName, modelLink) {
  try {
    console.log(`üìÑ –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å: ${modelLink}`);
    
    const modelData = await page.evaluate(() => {
      const bodyText = document.body.textContent;
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
      const h1 = document.querySelector('h1');
      const name = h1 ? h1.textContent.trim() : '';
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
      const descriptionElements = Array.from(document.querySelectorAll('p, div[class*="description"], div[class*="text"]'));
      const descriptions = descriptionElements
        .map(el => el.textContent.trim())
        .filter(text => text.length > 30 && text.length < 500)
        .slice(0, 3);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
      const contextMatch = bodyText.match(/(\d+[KM]?)\s*(tokens?|context)/i);
      const context = contextMatch ? contextMatch[1] : 'Unknown';
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      const paramsMatch = bodyText.match(/(\d+[BMK]?)\s*parameters?/i);
      const parameters = paramsMatch ? paramsMatch[1] : 'Unknown';
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—ã
      const inputPriceMatch = bodyText.match(/[Ii]nput.*?(\$[\d.]+|free)/i);
      const outputPriceMatch = bodyText.match(/[Oo]utput.*?(\$[\d.]+|free)/i);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      const provider = name.split(':')[0]?.trim() || 'Unknown';
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
      const capabilities = [];
      const lowerText = bodyText.toLowerCase();
      if (lowerText.includes('vision')) capabilities.push('Vision');
      if (lowerText.includes('code')) capabilities.push('Code');
      if (lowerText.includes('reasoning')) capabilities.push('Reasoning');
      if (lowerText.includes('multimodal')) capabilities.push('Multimodal');
      if (lowerText.includes('image')) capabilities.push('Image');
      if (lowerText.includes('audio')) capabilities.push('Audio');
      
      return {
        name: name,
        description: descriptions.join(' ').slice(0, 500),
        context: context,
        parameters: parameters,
        pricing: {
          input: inputPriceMatch ? inputPriceMatch[1] : '$0',
          output: outputPriceMatch ? outputPriceMatch[1] : '$0'
        },
        provider: provider,
        capabilities: capabilities,
        scrapedAt: new Date().toISOString()
      };
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º URL –∏ –∏—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    modelData.url = modelLink;
    modelData.searchName = modelName;
    
    console.log(`‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${modelData.name} (${modelData.provider})`);
    return modelData;
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è ${modelName}:`, error);
    return null;
  }
}

async function validatePage(page, modelName) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
    const h1 = await page.$eval('h1', el => el.textContent.trim()).catch(() => '');
    if (!h1) {
      console.error(`‚ùå ${modelName} - —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å (–Ω–µ—Ç h1)`);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–¥–µ–ª–∏ (—Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏)
    const bodyText = await page.evaluate(() => document.body.textContent);
    if (bodyText.includes('Model not found') || bodyText.includes('404')) {
      console.error(`‚ùå ${modelName} - –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      return false;
    }
    
    console.log(`‚úÖ ${modelName} - —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–∞–ª–∏–¥–Ω–∞`);
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è ${modelName}:`, error);
    return false;
  }
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ù–ê–°–¢–û–Ø–©–ï–ì–û –ø–∞—Ä—Å–µ—Ä–∞ OpenRouter —á–µ—Ä–µ–∑ DOM-–ø–æ–∏—Å–∫...');
  
  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π
  const models = await loadModelList();
  if (models.length === 0) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π');
    return;
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–∞—É–∑–µ—Ä
  const browser = await chromium.launch({
    headless: true,
    slowMo: 500
  });
  
  const context = await browser.newContext({
    viewport: { width: 1280, height: 720 },
    userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
    ignoreHTTPSErrors: true
  });
  
  const page = await context.newPage();
  
  const successfulModels = [];
  const failedModels = [];
  
  try {
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –º–æ–¥–µ–ª–µ–π
    console.log('üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º https://openrouter.ai/models...');
    await page.goto('https://openrouter.ai/models', {
      waitUntil: 'domcontentloaded',
      timeout: 30000
    });
    
    console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –º–æ–¥–µ–ª–µ–π...');
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å
    for (let i = 0; i < models.length; i++) {
      const model = models[i];
      const modelName = model.name;
      
      console.log(`\nüìã [${i + 1}/${models.length}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${modelName}`);
      
      try {
        // –®–∞–≥ 1: –ò—â–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        const modelLink = await findRealModelLink(page, modelName);
        
        if (!modelLink) {
          console.error(`‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è: ${modelName}`);
          failedModels.push({
            name: modelName,
            reason: 'link_not_found',
            step: 'search'
          });
          continue;
        }
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: ${modelLink}`);
        
        // –®–∞–≥ 2: –ü–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ —Å—Å—ã–ª–∫–µ
        await page.goto(modelLink, {
          waitUntil: 'domcontentloaded',
          timeout: 30000
        });
        
        // –®–∞–≥ 3: –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        const isValid = await validatePage(page, modelName);
        if (!isValid) {
          failedModels.push({
            name: modelName,
            url: modelLink,
            reason: 'page_validation_failed',
            step: 'validation'
          });
          continue;
        }
        
        // –®–∞–≥ 4: –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        const modelData = await extractModelInfo(page, modelName, modelLink);
        if (!modelData) {
          failedModels.push({
            name: modelName,
            url: modelLink,
            reason: 'extraction_failed',
            step: 'extraction'
          });
          continue;
        }
        
        // –®–∞–≥ 5: –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        successfulModels.push(modelData);
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: ${modelData.name}`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–∂–¥—ã–µ 10 –º–æ–¥–µ–ª–µ–π
        if (successfulModels.length % 10 === 0) {
          await fs.writeFile(
            'openrouter-progress.json',
            JSON.stringify(successfulModels, null, 2)
          );
          console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${successfulModels.length} –º–æ–¥–µ–ª–µ–π –≤ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π —Ñ–∞–π–ª`);
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await page.waitForTimeout(1000);
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${modelName}:`, error);
        failedModels.push({
          name: modelName,
          reason: 'processing_error',
          error: error.message,
          step: 'processing'
        });
      }
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  } finally {
    await browser.close();
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
  console.log('\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤...');
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—ã–µ –º–æ–¥–µ–ª–∏
  await fs.writeFile(
    'openrouter-real-models.json',
    JSON.stringify({
      lastUpdated: new Date().toISOString(),
      totalSuccessful: successfulModels.length,
      totalFailed: failedModels.length,
      models: successfulModels
    }, null, 2)
  );
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –º–æ–¥–µ–ª–∏
  await fs.writeFile(
    'openrouter-failed-models.json',
    JSON.stringify({
      lastUpdated: new Date().toISOString(),
      totalFailed: failedModels.length,
      failedModels: failedModels
    }, null, 2)
  );
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML —Ç–∞–±–ª–∏—Ü—É
  await generateHTMLTable(successfulModels);
  
  console.log('\nüéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!');
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${successfulModels.length} –º–æ–¥–µ–ª–µ–π`);
  console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å: ${failedModels.length} –º–æ–¥–µ–ª–µ–π`);
  console.log(`üìÑ HTML —Ç–∞–±–ª–∏—Ü–∞: openrouter-real-models.html`);
  console.log(`üìÑ JSON –¥–∞–Ω–Ω—ã–µ: openrouter-real-models.json`);
  console.log(`üìÑ –û—à–∏–±–∫–∏: openrouter-failed-models.json`);
}

async function generateHTMLTable(models) {
  const html = `<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>OpenRouter - –†–µ–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ (${models.length})</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 50%, #16213e 100%);
            color: #e0e0e0;
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
        }
        
        .header {
            text-align: center;
            margin-bottom: 40px;
            padding: 30px;
            background: rgba(0, 255, 255, 0.1);
            border-radius: 15px;
            border: 1px solid rgba(0, 255, 255, 0.3);
        }
        
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
            background: linear-gradient(45deg, #00FFFF, #00CCCC);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }
        
        .stats {
            display: flex;
            justify-content: center;
            gap: 30px;
            margin-top: 20px;
        }
        
        .stat {
            text-align: center;
            padding: 15px;
            background: rgba(0, 255, 255, 0.05);
            border-radius: 10px;
            border: 1px solid rgba(0, 255, 255, 0.2);
        }
        
        .stat-number {
            font-size: 2em;
            font-weight: bold;
            color: #00FFFF;
        }
        
        .search-container {
            margin-bottom: 30px;
            text-align: center;
        }
        
        .search-input {
            padding: 15px 20px;
            font-size: 16px;
            border: 2px solid rgba(0, 255, 255, 0.3);
            border-radius: 25px;
            background: rgba(0, 0, 0, 0.5);
            color: #e0e0e0;
            width: 400px;
            outline: none;
            transition: all 0.3s ease;
        }
        
        .search-input:focus {
            border-color: #00FFFF;
            box-shadow: 0 0 20px rgba(0, 255, 255, 0.3);
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 30px;
            background: rgba(0, 0, 0, 0.6);
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 0 30px rgba(0, 255, 255, 0.1);
        }
        
        th, td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid rgba(0, 255, 255, 0.1);
        }
        
        th {
            background: linear-gradient(90deg, #00CCCC 0%, #00FFFF 100%);
            color: #000000;
            font-weight: bold;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            cursor: pointer;
            position: relative;
        }
        
        th:hover {
            background: linear-gradient(90deg, #00FFFF 0%, #00CCCC 100%);
        }
        
        tr:hover {
            background: rgba(0, 255, 255, 0.05);
        }
        
        .model-name {
            font-weight: bold;
            color: #00FFFF;
        }
        
        .provider {
            color: #00CCCC;
            font-weight: 500;
        }
        
        .capabilities {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
        }
        
        .capability {
            background: rgba(0, 255, 255, 0.2);
            color: #00FFFF;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 0.8em;
        }
        
        .description {
            max-width: 300px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
        }
        
        .url-link {
            color: #00FFFF;
            text-decoration: none;
            font-size: 0.9em;
        }
        
        .url-link:hover {
            text-decoration: underline;
        }
        
        .sort-arrow {
            margin-left: 8px;
            font-size: 0.8em;
        }
        
        .pagination {
            display: flex;
            justify-content: center;
            margin-top: 30px;
            gap: 10px;
        }
        
        .page-btn {
            padding: 10px 15px;
            background: rgba(0, 255, 255, 0.1);
            border: 1px solid rgba(0, 255, 255, 0.3);
            color: #e0e0e0;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .page-btn:hover {
            background: rgba(0, 255, 255, 0.2);
        }
        
        .page-btn.active {
            background: #00FFFF;
            color: #000000;
        }
        
        .export-buttons {
            text-align: center;
            margin-top: 20px;
        }
        
        .export-btn {
            padding: 12px 25px;
            margin: 0 10px;
            background: linear-gradient(45deg, #00CCCC, #00FFFF);
            color: #000000;
            border: none;
            border-radius: 25px;
            cursor: pointer;
            font-weight: bold;
            transition: all 0.3s ease;
        }
        
        .export-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 255, 255, 0.4);
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>OpenRouter - –†–µ–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏</h1>
            <p>–ù–∞—Å—Ç–æ—è—â–∏–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</p>
            <div class="stats">
                <div class="stat">
                    <div class="stat-number">${models.length}</div>
                    <div>–í—Å–µ–≥–æ –º–æ–¥–µ–ª–µ–π</div>
                </div>
                <div class="stat">
                    <div class="stat-number">${[...new Set(models.map(m => m.provider))].length}</div>
                    <div>–ü—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤</div>
                </div>
                <div class="stat">
                    <div class="stat-number">${models.filter(m => m.capabilities.length > 0).length}</div>
                    <div>–° –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏</div>
                </div>
            </div>
        </div>
        
        <div class="search-container">
            <input type="text" class="search-input" placeholder="–ü–æ–∏—Å–∫ –ø–æ –º–æ–¥–µ–ª—è–º..." id="searchInput">
        </div>
        
        <table id="modelsTable">
            <thead>
                <tr>
                    <th onclick="sortTable(0)">–ù–∞–∑–≤–∞–Ω–∏–µ <span class="sort-arrow">‚Üï</span></th>
                    <th onclick="sortTable(1)">–ü—Ä–æ–≤–∞–π–¥–µ—Ä <span class="sort-arrow">‚Üï</span></th>
                    <th onclick="sortTable(2)">–ö–æ–Ω—Ç–µ–∫—Å—Ç <span class="sort-arrow">‚Üï</span></th>
                    <th onclick="sortTable(3)">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã <span class="sort-arrow">‚Üï</span></th>
                    <th onclick="sortTable(4)">–¶–µ–Ω–∞ (–≤—Ö–æ–¥/–≤—ã—Ö–æ–¥) <span class="sort-arrow">‚Üï</span></th>
                    <th onclick="sortTable(5)">–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ <span class="sort-arrow">‚Üï</span></th>
                    <th>–û–ø–∏—Å–∞–Ω–∏–µ</th>
                    <th>–°—Å—ã–ª–∫–∞</th>
                </tr>
            </thead>
            <tbody>
                ${models.map(model => `
                    <tr>
                        <td class="model-name">${model.name}</td>
                        <td class="provider">${model.provider}</td>
                        <td>${model.context}</td>
                        <td>${model.parameters}</td>
                        <td>${model.pricing.input} / ${model.pricing.output}</td>
                        <td>
                            <div class="capabilities">
                                ${model.capabilities.map(cap => `<span class="capability">${cap}</span>`).join('')}
                            </div>
                        </td>
                        <td class="description" title="${model.description}">${model.description}</td>
                        <td><a href="${model.url}" target="_blank" class="url-link">–û—Ç–∫—Ä—ã—Ç—å</a></td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
        
        <div class="export-buttons">
            <button class="export-btn" onclick="exportToJSON()">–≠–∫—Å–ø–æ—Ä—Ç JSON</button>
            <button class="export-btn" onclick="exportToCSV()">–≠–∫—Å–ø–æ—Ä—Ç CSV</button>
        </div>
    </div>
    
    <script>
        let currentData = ${JSON.stringify(models)};
        let currentSort = { column: -1, direction: 'asc' };
        
        // –ü–æ–∏—Å–∫
        document.getElementById('searchInput').addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase();
            const rows = document.querySelectorAll('#modelsTable tbody tr');
            
            rows.forEach(row => {
                const text = row.textContent.toLowerCase();
                row.style.display = text.includes(searchTerm) ? '' : 'none';
            });
        });
        
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        function sortTable(column) {
            const tbody = document.querySelector('#modelsTable tbody');
            const rows = Array.from(tbody.querySelectorAll('tr'));
            
            const direction = currentSort.column === column && currentSort.direction === 'asc' ? 'desc' : 'asc';
            currentSort = { column, direction };
            
            rows.sort((a, b) => {
                const aText = a.cells[column].textContent.trim();
                const bText = b.cells[column].textContent.trim();
                
                if (direction === 'asc') {
                    return aText.localeCompare(bText);
                } else {
                    return bText.localeCompare(aText);
                }
            });
            
            rows.forEach(row => tbody.appendChild(row));
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–µ–ª–∫–∏
            document.querySelectorAll('.sort-arrow').forEach(arrow => {
                arrow.textContent = '‚Üï';
            });
            document.querySelectorAll('th')[column].querySelector('.sort-arrow').textContent = direction === 'asc' ? '‚Üë' : '‚Üì';
        }
        
        // –≠–∫—Å–ø–æ—Ä—Ç
        function exportToJSON() {
            const dataStr = JSON.stringify(currentData, null, 2);
            const dataBlob = new Blob([dataStr], {type: 'application/json'});
            const url = URL.createObjectURL(dataBlob);
            const link = document.createElement('a');
            link.href = url;
            link.download = 'openrouter-real-models.json';
            link.click();
        }
        
        function exportToCSV() {
            const headers = ['–ù–∞–∑–≤–∞–Ω–∏–µ', '–ü—Ä–æ–≤–∞–π–¥–µ—Ä', '–ö–æ–Ω—Ç–µ–∫—Å—Ç', '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã', '–¶–µ–Ω–∞ –≤—Ö–æ–¥', '–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥', '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏', '–û–ø–∏—Å–∞–Ω–∏–µ', '–°—Å—ã–ª–∫–∞'];
            const csvContent = [
                headers.join(','),
                ...currentData.map(model => [
                    '"' + model.name.replace(/"/g, '""') + '"',
                    '"' + model.provider.replace(/"/g, '""') + '"',
                    '"' + model.context.replace(/"/g, '""') + '"',
                    '"' + model.parameters.replace(/"/g, '""') + '"',
                    '"' + model.pricing.input.replace(/"/g, '""') + '"',
                    '"' + model.pricing.output.replace(/"/g, '""') + '"',
                    '"' + model.capabilities.join('; ').replace(/"/g, '""') + '"',
                    '"' + model.description.replace(/"/g, '""') + '"',
                    '"' + model.url.replace(/"/g, '""') + '"'
                ].join(','))
            ].join('\\n');
            
            const dataBlob = new Blob([csvContent], {type: 'text/csv;charset=utf-8;'});
            const url = URL.createObjectURL(dataBlob);
            const link = document.createElement('a');
            link.href = url;
            link.download = 'openrouter-real-models.csv';
            link.click();
        }
    </script>
</body>
</html>`;
  
  await fs.writeFile('openrouter-real-models.html', html);
  console.log('üìÑ HTML —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞: openrouter-real-models.html');
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { main };
