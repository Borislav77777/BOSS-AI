/**
 * üß† ENHANCED AI BRAIN - –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–∑–≥ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
 *
 * –£–ª—É—á—à–µ–Ω–∏—è:
 * - –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π
 * - –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
 * - –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
 * - –£–º–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π
 */
import { Message } from '@/types';
export interface EnhancedChatContext {
    activeService: string | null;
    activeSection: string;
    conversationHistory: Message[];
    userPreferences: Record<string, unknown>;
    lastActivity: Date;
    serviceCapabilities: Map<string, ServiceCapability[]>;
    userIntentHistory: IntentHistory[];
}
export interface ServiceCapability {
    serviceId: string;
    capability: string;
    confidence: number;
    keywords: string[];
    examples: string[];
}
export interface IntentHistory {
    intent: string;
    serviceId: string;
    success: boolean;
    timestamp: Date;
    confidence: number;
}
export interface EnhancedChatResponse {
    success: boolean;
    message: string;
    data?: unknown;
    serviceId?: string;
    toolId?: string;
    isSystemResponse?: boolean;
    shouldRouteToService?: boolean;
    confidence: number;
    reasoning: string;
    alternatives: ServiceAlternative[];
}
export interface ServiceAlternative {
    serviceId: string;
    confidence: number;
    reason: string;
}
export interface EnhancedAIBrainConfig {
    enableSystemCommands: boolean;
    enableServiceRouting: boolean;
    enableContextAnalysis: boolean;
    enableLearning: boolean;
    maxHistoryLength: number;
    responseTimeout: number;
    confidenceThreshold: number;
    learningRate: number;
}
declare class EnhancedAIBrainService {
    private config;
    private context;
    private decisionCache;
    private learningMatrix;
    constructor();
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–µ—Ä–≤–∏—Å–æ–≤
     */
    private initializeServiceCapabilities;
    /**
     * –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
     */
    private analyzeIntentEnhanced;
    /**
     * –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private performContextualAnalysis;
    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ChatGPT
     */
    private determineChatGPTTool;
    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    private determineSettingsTool;
    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏–π
     */
    private applyLearning;
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    private generateMessageKey;
    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è
     */
    private loadLearningData;
    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è
     */
    private saveLearningData;
    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    processMessage(message: string, currentService?: string | null, currentSection?: string): Promise<EnhancedChatResponse>;
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –æ–±—É—á–µ–Ω–∏—è
     */
    private updateLearningMatrix;
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
     */
    private updateContext;
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
     */
    private handleSystemCommand;
    /**
     * –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫ —Å–µ—Ä–≤–∏—Å—É
     */
    private routeToService;
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    private handleGeneralQuery;
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è
     */
    getLearningStats(): {
        totalDecisions: number;
        averageConfidence: number;
        serviceDistribution: Record<string, number>;
    };
}
export declare const enhancedAIBrain: EnhancedAIBrainService;
export {};
//# sourceMappingURL=EnhancedAIBrain.d.ts.map