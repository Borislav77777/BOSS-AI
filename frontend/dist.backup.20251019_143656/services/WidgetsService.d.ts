/**
 * üéõÔ∏è WIDGETS SERVICE - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–∞–º–∏
 *
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –≤–∏–¥–∂–µ—Ç–∞–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
 * –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è, –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
 */
export interface Widget {
    id: string;
    type: string;
    title: string;
    description: string;
    icon: string;
    serviceId?: string;
    position: {
        x: number;
        y: number;
    };
    size: {
        width: number;
        height: number;
    };
    isMinimized: boolean;
    isVisible: boolean;
    isDraggable: boolean;
    isResizable: boolean;
    zIndex: number;
    settings: Record<string, unknown>;
    component: React.ComponentType<any>;
}
export interface WidgetType {
    id: string;
    name: string;
    description: string;
    icon: string;
    category: string;
    defaultSize: {
        width: number;
        height: number;
    };
    minSize: {
        width: number;
        height: number;
    };
    maxSize: {
        width: number;
        height: number;
    };
    component: React.ComponentType<any>;
    settings: WidgetSetting[];
}
export interface WidgetSetting {
    id: string;
    name: string;
    type: 'boolean' | 'string' | 'number' | 'select';
    defaultValue: unknown;
    options?: {
        value: string;
        label: string;
    }[];
    description: string;
}
declare class WidgetsService {
    private widgets;
    private widgetTypes;
    private nextZIndex;
    private isEnabled;
    constructor();
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
     */
    private initializeDefaultWidgets;
    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–∏–ø–∞ –≤–∏–¥–∂–µ—Ç–∞
     */
    registerWidgetType(widgetType: WidgetType): void;
    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞
     */
    createWidget(typeId: string, options?: Partial<Widget>): Widget;
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∏–¥–∂–µ—Ç–∞
     */
    private initializeWidgetSettings;
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ –ø–æ ID
     */
    getWidget(widgetId: string): Widget | undefined;
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
     */
    getAllWidgets(): Widget[];
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–∏–º—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
     */
    getVisibleWidgets(): Widget[];
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –≤–∏–¥–∂–µ—Ç–æ–≤
     */
    getWidgetTypes(): WidgetType[];
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –≤–∏–¥–∂–µ—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
     */
    getWidgetTypesByCategory(category: string): WidgetType[];
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞
     */
    updateWidget(widgetId: string, updates: Partial<Widget>): void;
    /**
     * –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞
     */
    moveWidget(widgetId: string, position: {
        x: number;
        y: number;
    }): void;
    /**
     * –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–∂–µ—Ç–∞
     */
    resizeWidget(widgetId: string, size: {
        width: number;
        height: number;
    }): void;
    /**
     * –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞
     */
    toggleMinimize(widgetId: string): void;
    /**
     * –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –≤–∏–¥–∂–µ—Ç–∞
     */
    toggleVisibility(widgetId: string): void;
    /**
     * –ü–æ–¥–Ω—è—Ç–∏–µ –≤–∏–¥–∂–µ—Ç–∞ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω
     */
    bringToFront(widgetId: string): void;
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞
     */
    removeWidget(widgetId: string): void;
    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
     */
    clearAllWidgets(): void;
    /**
     * –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–∏–¥–∂–µ—Ç–æ–≤
     */
    setEnabled(enabled: boolean): void;
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞ –≤–∏–¥–∂–µ—Ç–æ–≤
     */
    isWidgetsEnabled(): boolean;
    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–∏–¥–∂–µ—Ç–æ–≤
     */
    exportConfig(): string;
    /**
     * –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–∏–¥–∂–µ—Ç–æ–≤
     */
    importConfig(config: string): void;
}
export declare const widgetsService: WidgetsService;
export {};
//# sourceMappingURL=WidgetsService.d.ts.map