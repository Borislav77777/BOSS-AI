/**
 * –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Anti-Procrastination OS
 */
class NotificationService {
    constructor() {
        this.permissionGranted = false;
        this.checkPermission();
    }
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    async checkPermission() {
        if (!('Notification' in window)) {
            console.warn('[APOS] Notifications API –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
            return false;
        }
        if (Notification.permission === 'granted') {
            this.permissionGranted = true;
            return true;
        }
        if (Notification.permission !== 'denied') {
            const permission = await Notification.requestPermission();
            this.permissionGranted = permission === 'granted';
            return this.permissionGranted;
        }
        return false;
    }
    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    async send(title, options) {
        if (!this.permissionGranted) {
            await this.checkPermission();
        }
        if (!this.permissionGranted) {
            console.warn('[APOS] –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ');
            return null;
        }
        try {
            const notification = new Notification(title, {
                icon: '/logo.svg',
                badge: '/logo.svg',
                ...options,
            });
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞—Ç—å —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(() => notification.close(), 5000);
            return notification;
        }
        catch (error) {
            console.error('[APOS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error);
            return null;
        }
    }
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –±–ª–æ–∫–∞
     */
    notifyBlockStart(blockTitle, duration) {
        this.send(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º: ${blockTitle}`, {
            body: `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration} –º–∏–Ω—É—Ç. –§–æ–∫—É—Å!`,
            tag: 'block-start',
        });
        this.playSound('start');
    }
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –±–ª–æ–∫–∞
     */
    notifyBlockComplete(blockTitle, actualDuration) {
        const body = actualDuration
            ? `–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ ${actualDuration} –º–∏–Ω—É—Ç. –û—Ç–ª–∏—á–Ω–æ!`
            : '–í—ã–ø–æ–ª–Ω–µ–Ω–æ!';
        this.send(`‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${blockTitle}`, {
            body,
            tag: 'block-complete',
        });
        this.playSound('complete');
    }
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ä—ã–≤–µ
     */
    notifyBreak(duration) {
        this.send('‚òï –í—Ä–µ–º—è –ø–µ—Ä–µ—Ä—ã–≤–∞!', {
            body: `–û—Ç–¥–æ—Ö–Ω–∏—Ç–µ ${duration} –º–∏–Ω—É—Ç. –í—ã –∑–∞—Å–ª—É–∂–∏–ª–∏!`,
            tag: 'break',
        });
        this.playSound('break');
    }
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–æ—Ç–∏–≤–∞—Ü–∏–∏
     */
    notifyMotivation(message) {
        this.send('üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è!', {
            body: message,
            tag: 'motivation',
        });
    }
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
     */
    notifyAchievement(title, description) {
        this.send(`üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${title}`, {
            body: description,
            tag: 'achievement',
        });
        this.playSound('achievement');
    }
    /**
     * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞
     */
    playSound(type) {
        try {
            // –ü—Ä–æ—Å—Ç—ã–µ –∑–≤—É–∫–æ–≤—ã–µ —á–∞—Å—Ç–æ—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
            const frequencies = {
                start: 440, // A
                complete: 523.25, // C
                break: 392, // G
                achievement: 659.25, // E
            };
            const context = new AudioContext();
            const oscillator = context.createOscillator();
            const gainNode = context.createGain();
            oscillator.connect(gainNode);
            gainNode.connect(context.destination);
            oscillator.frequency.value = frequencies[type];
            oscillator.type = 'sine';
            gainNode.gain.setValueAtTime(0.3, context.currentTime);
            gainNode.gain.exponentialRampToValueAtTime(0.01, context.currentTime + 0.5);
            oscillator.start(context.currentTime);
            oscillator.stop(context.currentTime + 0.5);
        }
        catch (error) {
            console.warn('[APOS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –∑–≤—É–∫–∞:', error);
        }
    }
    /**
     * –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ toast —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    showToast(message, type = 'info', duration = 3000) {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç toast
        const toast = document.createElement('div');
        toast.className = `apos-toast apos-toast-${type}`;
        toast.textContent = message;
        toast.style.cssText = `
      position: fixed;
      bottom: 20px;
      right: 20px;
      padding: 12px 20px;
      border-radius: 8px;
      background: ${this.getToastColor(type)};
      color: white;
      font-size: 14px;
      font-weight: 500;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      z-index: 10000;
      animation: slideIn 0.3s ease-out;
    `;
        document.body.appendChild(toast);
        // –£–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        setTimeout(() => {
            toast.style.animation = 'slideOut 0.3s ease-in';
            setTimeout(() => toast.remove(), 300);
        }, duration);
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ toast –ø–æ —Ç–∏–ø—É
     */
    getToastColor(type) {
        const colors = {
            info: '#3b82f6',
            success: '#10b981',
            warning: '#f59e0b',
            error: '#ef4444',
        };
        return colors[type] || colors.info;
    }
}
export const notificationService = new NotificationService();
//# sourceMappingURL=notificationService.js.map