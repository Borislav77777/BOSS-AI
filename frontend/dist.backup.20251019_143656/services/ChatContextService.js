/**
 * –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —á–∞—Ç–∞
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ —á–∞—Ç–µ
 */
class ChatContextService {
    constructor() {
        this.context = {
            attachedItems: [],
            userLocation: 'workspace'
        };
        this.listeners = new Set();
        /**
         * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
         */
        this.handleAttachContext = (event) => {
            const contextButton = event.detail;
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç
            const existingIndex = this.context.attachedItems.findIndex(item => item.id === contextButton.id);
            if (existingIndex === -1) {
                this.context.attachedItems.push(contextButton);
                this.notifyListeners();
                console.log(`–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω: ${contextButton.type} - ${contextButton.title}`);
            }
        };
        /**
         * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
         */
        this.handleDetachContext = (event) => {
            const { id } = event.detail;
            this.context.attachedItems = this.context.attachedItems.filter(item => item.id !== id);
            this.notifyListeners();
            console.log(`–ö–æ–Ω—Ç–µ–∫—Å—Ç —É–¥–∞–ª–µ–Ω: ${id}`);
        };
        /**
         * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ workspace
         */
        this.handleWorkspaceNavigate = (event) => {
            const { projectId } = event.detail;
            // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–µ–∫—Ç –≤ workspace
            const project = this.findProjectById(projectId);
            if (project) {
                this.context.activeProject = {
                    id: project.id,
                    title: project.title,
                    type: 'project'
                };
                this.context.userLocation = 'project';
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
                this.autoAttachActiveProject();
                this.notifyListeners();
                console.log(`–ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç: ${project.title}`);
            }
        };
        /**
         * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç –∏–∑ workspace
         */
        this.handleWorkspaceSendToChat = (event) => {
            const { items } = event.detail;
            items.forEach(item => {
                const contextButton = {
                    id: item.id,
                    type: item.type === 'folder' ? 'project' : (item.type === 'note' ? 'document' : item.type),
                    title: item.title,
                    icon: item.emoji || 'üìÑ',
                    content: item.content,
                    metadata: {
                        path: item.path,
                        size: item.size,
                        tags: item.tags,
                        createdAt: item.createdAt,
                        updatedAt: item.updatedAt
                    },
                    removable: true,
                    source: 'workspace'
                };
                this.attachContext(contextButton);
            });
        };
        this.initEventListeners();
    }
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
     */
    initEventListeners() {
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        window.addEventListener('chat:attach-context', this.handleAttachContext);
        window.addEventListener('chat:detach-context', this.handleDetachContext);
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ workspace
        window.addEventListener('workspace:navigate', this.handleWorkspaceNavigate);
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç –∏–∑ workspace
        window.addEventListener('workspace:send-to-chat', this.handleWorkspaceSendToChat);
    }
    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
     */
    autoAttachActiveProject() {
        if (this.context.activeProject) {
            const existingProject = this.context.attachedItems.find(item => item.type === 'project' && item.id === this.context.activeProject.id);
            if (!existingProject) {
                const projectButton = {
                    id: this.context.activeProject.id,
                    type: 'project',
                    title: this.context.activeProject.title,
                    icon: 'üìÅ',
                    removable: true,
                    source: 'workspace',
                    metadata: {
                        autoAttached: true
                    }
                };
                this.context.attachedItems.push(projectButton);
            }
        }
    }
    /**
     * –ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ ID
     */
    findProjectById(projectId) {
        // –ü–æ–ª—É—á–∞–µ–º workspace items –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        const workspaceItems = window.__PLATFORM_STATE__?.workspaceItems || [];
        return workspaceItems.find((item) => item.id === projectId && item.type === 'folder') || null;
    }
    /**
     * –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
     */
    attachContext(contextButton) {
        window.dispatchEvent(new CustomEvent('chat:attach-context', {
            detail: contextButton
        }));
    }
    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
     */
    detachContext(id) {
        window.dispatchEvent(new CustomEvent('chat:detach-context', {
            detail: { id }
        }));
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
     */
    getContext() {
        return { ...this.context };
    }
    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
     */
    subscribe(listener) {
        this.listeners.add(listener);
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏
        return () => {
            this.listeners.delete(listener);
        };
    }
    /**
     * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
     */
    notifyListeners() {
        this.listeners.forEach(listener => {
            try {
                listener(this.getContext());
            }
            catch (error) {
                console.error('–û—à–∏–±–∫–∞ –≤ —Å–ª—É—à–∞—Ç–µ–ª–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–∞—Ç–∞:', error);
            }
        });
    }
    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
     */
    clearContext() {
        this.context.attachedItems = [];
        this.context.activeProject = undefined;
        this.context.activeDocument = undefined;
        this.context.userLocation = 'workspace';
        this.notifyListeners();
        console.log('–ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω');
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è AI Brain
     */
    getContextForAI() {
        const contextSummary = this.generateContextSummary();
        return {
            attachedItems: this.context.attachedItems,
            activeProject: this.context.activeProject,
            userLocation: this.context.userLocation,
            contextSummary
        };
    }
    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è AI
     */
    generateContextSummary() {
        const parts = [];
        if (this.context.activeProject) {
            parts.push(`–ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç: ${this.context.activeProject.title}`);
        }
        if (this.context.attachedItems.length > 0) {
            const items = this.context.attachedItems.map(item => `${item.type}: ${item.title}`).join(', ');
            parts.push(`–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: ${items}`);
        }
        parts.push(`–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${this.context.userLocation}`);
        return parts.join(' | ');
    }
}
// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
export const chatContextService = new ChatContextService();
//# sourceMappingURL=ChatContextService.js.map