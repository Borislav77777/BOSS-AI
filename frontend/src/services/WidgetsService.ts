/**
 * üéõÔ∏è WIDGETS SERVICE - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–∞–º–∏
 *
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ –≤–∏–¥–∂–µ—Ç–∞–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
 * –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è, –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
 */

export interface Widget {
  id: string;
  type: string;
  title: string;
  description: string;
  icon: string;
  serviceId?: string;
  position: { x: number; y: number };
  size: { width: number; height: number };
  isMinimized: boolean;
  isVisible: boolean;
  isDraggable: boolean;
  isResizable: boolean;
  zIndex: number;
  settings: Record<string, unknown>;
  component: React.ComponentType<any>;
}

export interface WidgetType {
  id: string;
  name: string;
  description: string;
  icon: string;
  category: string;
  defaultSize: { width: number; height: number };
  minSize: { width: number; height: number };
  maxSize: { width: number; height: number };
  component: React.ComponentType<any>;
  settings: WidgetSetting[];
}

export interface WidgetSetting {
  id: string;
  name: string;
  type: 'boolean' | 'string' | 'number' | 'select';
  defaultValue: unknown;
  options?: { value: string; label: string }[];
  description: string;
}

class WidgetsService {
  private widgets: Map<string, Widget> = new Map();
  private widgetTypes: Map<string, WidgetType> = new Map();
  private nextZIndex = 1000;
  private isEnabled = true;

  constructor() {
    this.initializeDefaultWidgets();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
   */
  private initializeDefaultWidgets() {
    // –í–∏–¥–∂–µ—Ç –≤—Ä–µ–º–µ–Ω–∏
    this.registerWidgetType({
      id: 'time-widget',
      name: '–ß–∞—Å—ã',
      description: '–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É',
      icon: 'Clock',
      category: 'utility',
      defaultSize: { width: 200, height: 120 },
      minSize: { width: 150, height: 80 },
      maxSize: { width: 300, height: 200 },
      component: () => null, // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      settings: [
        {
          id: 'show-seconds',
          name: '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–µ–∫—É–Ω–¥—ã',
          type: 'boolean',
          defaultValue: true,
          description: '–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–µ–∫—É–Ω–¥—ã –≤ —á–∞—Å–∞—Ö'
        },
        {
          id: 'show-date',
          name: '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–∞—Ç—É',
          type: 'boolean',
          defaultValue: true,
          description: '–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –¥–∞—Ç—É –ø–æ–¥ –≤—Ä–µ–º–µ–Ω–µ–º'
        },
        {
          id: 'format24h',
          name: '24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç',
          type: 'boolean',
          defaultValue: true,
          description: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 24-—á–∞—Å–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏'
        }
      ]
    });

    // –í–∏–¥–∂–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
    this.registerWidgetType({
      id: 'voice-widget',
      name: '–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥',
      description: '–ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –≤–≤–æ–¥—É',
      icon: 'Mic',
      category: 'input',
      defaultSize: { width: 180, height: 100 },
      minSize: { width: 120, height: 60 },
      maxSize: { width: 250, height: 150 },
      component: () => null, // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      settings: [
        {
          id: 'auto-start',
          name: '–ê–≤—Ç–æ–∑–∞–ø—É—Å–∫',
          type: 'boolean',
          defaultValue: false,
          description: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞—Ç—å –∑–∞–ø–∏—Å—å –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏'
        },
        {
          id: 'show-transcription',
          name: '–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é',
          type: 'boolean',
          defaultValue: true,
          description: '–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç'
        }
      ]
    });
  }

  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–∏–ø–∞ –≤–∏–¥–∂–µ—Ç–∞
   */
  registerWidgetType(widgetType: WidgetType): void {
    this.widgetTypes.set(widgetType.id, widgetType);
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞
   */
  createWidget(typeId: string, options: Partial<Widget> = {}): Widget {
    const widgetType = this.widgetTypes.get(typeId);
    if (!widgetType) {
      throw new Error(`Widget type ${typeId} not found`);
    }

    const widget: Widget = {
      id: `widget_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      type: typeId,
      title: widgetType.name,
      description: widgetType.description,
      icon: widgetType.icon,
      serviceId: options.serviceId,
      position: options.position || { x: 100, y: 100 },
      size: options.size || { ...widgetType.defaultSize },
      isMinimized: false,
      isVisible: true,
      isDraggable: true,
      isResizable: true,
      zIndex: this.nextZIndex++,
      settings: this.initializeWidgetSettings(widgetType.settings),
      component: widgetType.component,
      ...options
    };

    this.widgets.set(widget.id, widget);
    return widget;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤–∏–¥–∂–µ—Ç–∞
   */
  private initializeWidgetSettings(settings: WidgetSetting[]): Record<string, unknown> {
    const widgetSettings: Record<string, unknown> = {};
    settings.forEach(setting => {
      widgetSettings[setting.id] = setting.defaultValue;
    });
    return widgetSettings;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞ –ø–æ ID
   */
  getWidget(widgetId: string): Widget | undefined {
    return this.widgets.get(widgetId);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
   */
  getAllWidgets(): Widget[] {
    return Array.from(this.widgets.values());
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∏–¥–∏–º—ã—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
   */
  getVisibleWidgets(): Widget[] {
    return Array.from(this.widgets.values()).filter(w => w.isVisible);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –≤–∏–¥–∂–µ—Ç–æ–≤
   */
  getWidgetTypes(): WidgetType[] {
    return Array.from(this.widgetTypes.values());
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –≤–∏–¥–∂–µ—Ç–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  getWidgetTypesByCategory(category: string): WidgetType[] {
    return Array.from(this.widgetTypes.values()).filter(t => t.category === category);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞
   */
  updateWidget(widgetId: string, updates: Partial<Widget>): void {
    const widget = this.widgets.get(widgetId);
    if (widget) {
      Object.assign(widget, updates);
    }
  }

  /**
   * –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞
   */
  moveWidget(widgetId: string, position: { x: number; y: number }): void {
    this.updateWidget(widgetId, { position });
  }

  /**
   * –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–¥–∂–µ—Ç–∞
   */
  resizeWidget(widgetId: string, size: { width: number; height: number }): void {
    const widget = this.widgets.get(widgetId);
    if (widget) {
      const widgetType = this.widgetTypes.get(widget.type);
      if (widgetType) {
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
        const newSize = {
          width: Math.max(widgetType.minSize.width, Math.min(widgetType.maxSize.width, size.width)),
          height: Math.max(widgetType.minSize.height, Math.min(widgetType.maxSize.height, size.height))
        };
        this.updateWidget(widgetId, { size: newSize });
      }
    }
  }

  /**
   * –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞
   */
  toggleMinimize(widgetId: string): void {
    const widget = this.widgets.get(widgetId);
    if (widget) {
      this.updateWidget(widgetId, { isMinimized: !widget.isMinimized });
    }
  }

  /**
   * –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –≤–∏–¥–∂–µ—Ç–∞
   */
  toggleVisibility(widgetId: string): void {
    const widget = this.widgets.get(widgetId);
    if (widget) {
      this.updateWidget(widgetId, { isVisible: !widget.isVisible });
    }
  }

  /**
   * –ü–æ–¥–Ω—è—Ç–∏–µ –≤–∏–¥–∂–µ—Ç–∞ –Ω–∞ –ø–µ—Ä–µ–¥–Ω–∏–π –ø–ª–∞–Ω
   */
  bringToFront(widgetId: string): void {
    this.updateWidget(widgetId, { zIndex: this.nextZIndex++ });
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞
   */
  removeWidget(widgetId: string): void {
    this.widgets.delete(widgetId);
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤–∏–¥–∂–µ—Ç–æ–≤
   */
  clearAllWidgets(): void {
    this.widgets.clear();
  }

  /**
   * –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤–∏–¥–∂–µ—Ç–æ–≤
   */
  setEnabled(enabled: boolean): void {
    this.isEnabled = enabled;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Å–∏—Å—Ç–µ–º–∞ –≤–∏–¥–∂–µ—Ç–æ–≤
   */
  isWidgetsEnabled(): boolean {
    return this.isEnabled;
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–∏–¥–∂–µ—Ç–æ–≤
   */
  exportConfig(): string {
    const config = {
      widgets: Array.from(this.widgets.values()).map(w => ({
        id: w.id,
        type: w.type,
        title: w.title,
        position: w.position,
        size: w.size,
        isMinimized: w.isMinimized,
        isVisible: w.isVisible,
        settings: w.settings
      })),
      widgetTypes: Array.from(this.widgetTypes.values())
    };

    return JSON.stringify(config, null, 2);
  }

  /**
   * –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–∏–¥–∂–µ—Ç–æ–≤
   */
  importConfig(config: string): void {
    try {
      const data = JSON.parse(config);

      if (data.widgets) {
        for (const widgetData of data.widgets) {
          const widgetType = this.widgetTypes.get(widgetData.type);
          if (widgetType) {
            this.createWidget(widgetData.type, widgetData);
          }
        }
      }
    } catch (error) {
      console.error('Error importing widgets config:', error);
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const widgetsService = new WidgetsService();
