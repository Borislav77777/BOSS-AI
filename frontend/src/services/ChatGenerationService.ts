/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –≤ —á–∞—Ç–µ
 */

import { ChatMessage, GenerationState, PromptImprovementData } from '../types/chat';

class ChatGenerationService {
  private generationState: GenerationState = {
    isGenerating: false
  };

  private messageUpdateCallbacks: Map<string, (content: string) => void> = new Map();
  private stopCallbacks: Map<string, () => void> = new Map();

  constructor() {
    this.setupEventListeners();
  }

  private setupEventListeners() {
    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
    window.addEventListener('chat:improve-prompt', (event: Event) => {
      const customEvent = event as CustomEvent<PromptImprovementData>;
      this.handlePromptImprovement(customEvent.detail);
    });

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    window.addEventListener('chat:stop-generation', (event: Event) => {
      const customEvent = event as CustomEvent<{ messageId: string }>;
      this.stopGeneration(customEvent.detail.messageId);
    });
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
  private async handlePromptImprovement(data: PromptImprovementData) {
    try {
      // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
      const messageId = this.generateMessageId();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      this.sendMessage({
        id: messageId,
        content: `‚ú® **–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞**\n\n**–ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç:**\n${data.originalPrompt}\n\n**–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:**\n${data.improvedPrompt}\n\n**–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π:**\n${data.explanation}\n\n**–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è:**\n${data.suggestions.map(s => `‚Ä¢ ${s}`).join('\n')}\n\n---\n\n**–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø—Ä–æ–º–ø—Ç–µ?** –ï—Å–ª–∏ –¥–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –∏ —è –æ–±–Ω–æ–≤–ª—é –ø—Ä–æ–º–ø—Ç. –ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ–º–ø—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!`,
        role: 'assistant',
        timestamp: new Date(),
        isGenerating: false,
        metadata: {
          originalPrompt: data.originalPrompt,
          improvedPrompt: data.improvedPrompt,
          suggestions: data.suggestions,
          explanation: data.explanation
        }
      });

      // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      this.waitForUserFeedback(messageId, data);

    } catch (error) {
      console.error('Failed to handle prompt improvement:', error);
    }
  }

  // –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private waitForUserFeedback(messageId: string, improvementData: PromptImprovementData) {
    const handleUserMessage = (event: CustomEvent<{ content: string; messageId: string }>) => {
      if (event.detail.messageId === messageId) {
        const userContent = event.detail.content.toLowerCase().trim();

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–∞–ª –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
        if (userContent && !userContent.includes('–Ω–µ—Ç') && !userContent.includes('–Ω–µ –Ω—É–∂–Ω–æ')) {
          this.processUserFeedback(messageId, event.detail.content, improvementData);
        } else {
          // –ü—Ä–æ–º–ø—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
          this.finalizePrompt(messageId, improvementData.improvedPrompt);
        }

        // –£–±–∏—Ä–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å
        window.removeEventListener('chat:user-message', handleUserMessage as unknown as EventListener);
      }
    };

    window.addEventListener('chat:user-message', handleUserMessage as EventListener);
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private async processUserFeedback(messageId: string, feedback: string, improvementData: PromptImprovementData) {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
      this.updateMessage(messageId, `‚ú® **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞**\n\n**–í–∞—à–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è:**\n${feedback}\n\n**–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:**\n${improvementData.improvedPrompt}\n\n**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:**\n${feedback}\n\n–£—á—Ç–∏—Ç–µ —ç—Ç–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.\n\n---\n\n**–ü—Ä–æ–º–ø—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!** –ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...`, false);

      // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
      const finalPrompt = `${improvementData.improvedPrompt}\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n${feedback}\n\n–£—á—Ç–∏ —ç—Ç–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.`;

      await this.startGeneration(messageId, finalPrompt);

    } catch (error) {
      console.error('Failed to process user feedback:', error);
    }
  }

  // –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
  private async finalizePrompt(messageId: string, prompt: string) {
    try {
      this.updateMessage(messageId, `‚úÖ **–ü—Ä–æ–º–ø—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!**\n\n–ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ...`, false);
      await this.startGeneration(messageId, prompt);
    } catch (error) {
      console.error('Failed to finalize prompt:', error);
    }
  }

  // –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  private async startGeneration(messageId: string, prompt: string) {
    try {
      this.generationState.isGenerating = true;
      this.generationState.currentMessageId = messageId;

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      const generationMessageId = this.generateMessageId();

      this.sendMessage({
        id: generationMessageId,
        content: 'üîÑ **–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...**\n\n',
        role: 'assistant',
        timestamp: new Date(),
        isGenerating: true
      });

      // –°–∏–º—É–ª–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é (–∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –∫ AI)
      await this.simulateGeneration(generationMessageId, prompt);

    } catch (error) {
      console.error('Failed to start generation:', error);
      this.stopGeneration(messageId);
    }
  }

  // –°–∏–º—É–ª—è—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)
  private async simulateGeneration(messageId: string, prompt: string) {
    const steps = [
      '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å...',
      '–§–æ—Ä–º–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞...',
      '–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç...',
      '–ü—Ä–æ–≤–µ—Ä—è—é –∫–∞—á–µ—Å—Ç–≤–æ...',
      '–§–∏–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—Ç–≤–µ—Ç...'
    ];

    let currentContent = 'üîÑ **–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...**\n\n';

    for (let i = 0; i < steps.length; i++) {
      if (!this.generationState.isGenerating || this.generationState.currentMessageId !== messageId) {
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        this.updateMessage(messageId, currentContent + '\n\n‚èπÔ∏è **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º**', false);
        return;
      }

      currentContent += `‚Ä¢ ${steps[i]}\n`;
      this.updateMessage(messageId, currentContent, true);

      // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
      await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));
    }

    // –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const finalContent = currentContent + '\n\n‚úÖ **–ì–æ—Ç–æ–≤–æ!**\n\n' + this.generateMockResponse(prompt);
    this.updateMessage(messageId, finalContent, false);

    this.generationState.isGenerating = false;
    this.generationState.currentMessageId = undefined;
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∫–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
  private generateMockResponse(prompt: string): string {
    return `**–†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞:**\n\n${prompt}\n\n**–û—Ç–≤–µ—Ç:**\n\n–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ–º–ø—Ç–∞. –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç AI-–º–æ–¥–µ–ª–∏.\n\n**–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:**\n‚Ä¢ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º\n‚Ä¢ –£—á—Ç–µ–Ω—ã –≤—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è\n‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n\n*–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°—Ç–æ–ø"*`;
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  public stopGeneration(messageId: string) {
    if (this.generationState.isGenerating && this.generationState.currentMessageId === messageId) {
      this.generationState.isGenerating = false;
      this.generationState.currentMessageId = undefined;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      this.updateMessage(messageId, '‚èπÔ∏è **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º**', false);

      console.log('Generation stopped by user');
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
  private sendMessage(message: ChatMessage) {
    window.dispatchEvent(new CustomEvent('chat:new-message', { detail: message }));
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  private updateMessage(messageId: string, content: string, isGenerating: boolean) {
    window.dispatchEvent(new CustomEvent('chat:update-message', {
      detail: { messageId, content, isGenerating }
    }));
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏—è
  private generateMessageId(): string {
    return `msg_${Date.now()}_${Math.random().toString(36).slice(2, 8)}`;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  public getGenerationState(): GenerationState {
    return { ...this.generationState };
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏–¥–µ—Ç –ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
  public isGenerating(): boolean {
    return this.generationState.isGenerating;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export const chatGenerationService = new ChatGenerationService();
export default chatGenerationService;
