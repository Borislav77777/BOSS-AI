/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */

import { ERRORS } from '@/constants/errors';

export type NotificationType = 'success' | 'error' | 'warning' | 'info';

export interface Notification {
  id: string;
  type: NotificationType;
  title: string;
  message: string;
  duration?: number;
  actions?: NotificationAction[];
  metadata?: Record<string, any>;
}

export interface NotificationAction {
  label: string;
  action: () => void;
  variant?: 'primary' | 'secondary' | 'danger';
}

class NotificationService {
  private notifications: Notification[] = [];
  private listeners: ((notifications: Notification[]) => void)[] = [];
  private nextId = 1;

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  show(
    type: NotificationType,
    title: string,
    message: string,
    options?: {
      duration?: number;
      actions?: NotificationAction[];
      metadata?: Record<string, any>;
    }
  ): string {
    const notification: Notification = {
      id: `notification_${this.nextId++}`,
      type,
      title,
      message,
      duration: options?.duration ?? this.getDefaultDuration(type),
      actions: options?.actions,
      metadata: options?.metadata,
    };

    this.notifications.unshift(notification);
    this.notifyListeners();

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
    if (notification.duration && notification.duration > 0) {
      setTimeout(() => {
        this.hide(notification.id);
      }, notification.duration);
    }

    return notification.id;
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
   */
  success(title: string, message: string, options?: Partial<Notification>): string {
    return this.show('success', title, message, options);
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
   */
  error(title: string, message: string, options?: Partial<Notification>): string {
    return this.show('error', title, message, options);
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
   */
  warning(title: string, message: string, options?: Partial<Notification>): string {
    return this.show('warning', title, message, options);
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  info(title: string, message: string, options?: Partial<Notification>): string {
    return this.show('info', title, message, options);
  }

  /**
   * –°–∫—Ä—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  hide(id: string): void {
    this.notifications = this.notifications.filter(n => n.id !== id);
    this.notifyListeners();
  }

  /**
   * –°–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  hideAll(): void {
    this.notifications = [];
    this.notifyListeners();
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  getNotifications(): Notification[] {
    return [...this.notifications];
  }

  /**
   * –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  subscribe(listener: (notifications: Notification[]) => void): () => void {
    this.listeners.push(listener);
    return () => {
      this.listeners = this.listeners.filter(l => l !== listener);
    };
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–∑ Error Boundary
   */
  showErrorBoundaryNotification(
    error: Error,
    errorInfo?: {
      componentStack?: string;
      errorBoundary?: string;
    }
  ): string {
    const errorType = this.determineErrorType(error);
    const title = this.getErrorTitle(errorType);
    const message = this.getErrorMessage(error, errorType);

    return this.error(title, message, {
      duration: 0, // –ù–µ —Å–∫—Ä—ã–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      actions: [
        {
          label: '–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏',
          action: () => this.showErrorDetails(error, errorInfo),
          variant: 'secondary',
        },
        {
          label: '–ó–∞–∫—Ä—ã—Ç—å',
          action: () => this.hideAll(),
          variant: 'primary',
        },
      ],
      metadata: {
        errorType,
        componentStack: errorInfo?.componentStack,
        errorBoundary: errorInfo?.errorBoundary,
      },
    });
  }

  private getDefaultDuration(type: NotificationType): number {
    switch (type) {
      case 'success': return 3000;
      case 'error': return 0; // –ù–µ —Å–∫—Ä—ã–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      case 'warning': return 5000;
      case 'info': return 4000;
      default: return 3000;
    }
  }

  private determineErrorType(error: Error): string {
    if (error.name === 'TypeError') return '–û—à–∏–±–∫–∞ —Ç–∏–ø–∞';
    if (error.name === 'ReferenceError') return '–û—à–∏–±–∫–∞ —Å—Å—ã–ª–∫–∏';
    if (error.name === 'NetworkError') return '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏';
    if (error.message.includes('fetch')) return '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏';
    if (error.message.includes('auth')) return '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏';
    if (error.message.includes('permission')) return '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞';
    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
  }

  private getErrorTitle(errorType: string): string {
    return errorType;
  }

  private getErrorMessage(error: Error, errorType: string): string {
    if (error.message) {
      return error.message;
    }

    switch (errorType) {
      case '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏': return ERRORS.MESSAGES.NETWORK;
      case '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏': return ERRORS.MESSAGES.AUTHENTICATION;
      case '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞': return ERRORS.MESSAGES.AUTHORIZATION;
      default: return ERRORS.MESSAGES.GENERIC;
    }
  }

  private showErrorDetails(error: Error, _errorInfo?: any): void {
    // const details = {
    //   message: error.message,
    //   stack: error.stack,
    //   componentStack: errorInfo?.componentStack,
    //   userAgent: navigator.userAgent,
    //   url: window.location.href,
    //   timestamp: new Date().toISOString(),
    // };

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (import.meta.env.DEV) {
      console.group('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏');
      console.error('–û—à–∏–±–∫–∞:', error);
      // console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', errorInfo);
      // console.log('–î–µ—Ç–∞–ª–∏:', details);
      console.groupEnd();
    }

    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏
    this.info('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏', '–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ –≤—ã–≤–µ–¥–µ–Ω–∞ –≤ –∫–æ–Ω—Å–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞');
  }

  private notifyListeners(): void {
    this.listeners.forEach(listener => listener(this.notifications));
  }
}

export const notificationService = new NotificationService();
