/**
 * –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —á–∞—Ç–∞
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ —á–∞—Ç–µ
 */

import { WorkspaceItem } from '@/types';
import { ChatContext, ChatContextButton } from '@/types/chat';

class ChatContextService {
  private context: ChatContext = {
    attachedItems: [],
    userLocation: 'workspace'
  };

  private listeners: Set<(context: ChatContext) => void> = new Set();

  constructor() {
    this.initEventListeners();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
   */
  private initEventListeners(): void {
    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    window.addEventListener('chat:attach-context', this.handleAttachContext as EventListener);
    window.addEventListener('chat:detach-context', this.handleDetachContext as EventListener);

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ workspace
    window.addEventListener('workspace:navigate', this.handleWorkspaceNavigate as EventListener);

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç –∏–∑ workspace
    window.addEventListener('workspace:send-to-chat', this.handleWorkspaceSendToChat as EventListener);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  private handleAttachContext = (event: CustomEvent<ChatContextButton>): void => {
    const contextButton = event.detail;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç
    const existingIndex = this.context.attachedItems.findIndex(item => item.id === contextButton.id);

    if (existingIndex === -1) {
      this.context.attachedItems.push(contextButton);
      this.notifyListeners();
      console.log(`–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω: ${contextButton.type} - ${contextButton.title}`);
    }
  };

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  private handleDetachContext = (event: CustomEvent<{ id: string }>): void => {
    const { id } = event.detail;

    this.context.attachedItems = this.context.attachedItems.filter(item => item.id !== id);
    this.notifyListeners();
    console.log(`–ö–æ–Ω—Ç–µ–∫—Å—Ç —É–¥–∞–ª–µ–Ω: ${id}`);
  };

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ workspace
   */
  private handleWorkspaceNavigate = (event: CustomEvent<{ projectId: string }>): void => {
    const { projectId } = event.detail;

    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–µ–∫—Ç –≤ workspace
    const project = this.findProjectById(projectId);
    if (project) {
      this.context.activeProject = {
        id: project.id,
        title: project.title,
        type: 'project'
      };
      this.context.userLocation = 'project';

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
      this.autoAttachActiveProject();

      this.notifyListeners();
      console.log(`–ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç: ${project.title}`);
    }
  };

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç –∏–∑ workspace
   */
  private handleWorkspaceSendToChat = (event: CustomEvent<{ items: WorkspaceItem[] }>): void => {
    const { items } = event.detail;

    items.forEach(item => {
      const contextButton: ChatContextButton = {
        id: item.id,
        type: item.type === 'folder' ? 'project' : (item.type === 'note' ? 'document' : item.type as 'document' | 'file' | 'image'),
        title: item.title,
        icon: item.emoji || 'üìÑ',
        content: item.content,
        metadata: {
          path: item.path,
          size: item.size,
          tags: item.tags,
          createdAt: item.createdAt,
          updatedAt: item.updatedAt
        },
        removable: true,
        source: 'workspace'
      };

      this.attachContext(contextButton);
    });
  };

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
   */
  private autoAttachActiveProject(): void {
    if (this.context.activeProject) {
      const existingProject = this.context.attachedItems.find(
        item => item.type === 'project' && item.id === this.context.activeProject!.id
      );

      if (!existingProject) {
        const projectButton: ChatContextButton = {
          id: this.context.activeProject.id,
          type: 'project',
          title: this.context.activeProject.title,
          icon: 'üìÅ',
          removable: true,
          source: 'workspace',
          metadata: {
            autoAttached: true
          }
        };

        this.context.attachedItems.push(projectButton);
      }
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ ID
   */
  private findProjectById(projectId: string): WorkspaceItem | null {
    // –ü–æ–ª—É—á–∞–µ–º workspace items –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const workspaceItems = (window as { __PLATFORM_STATE__?: { workspaceItems: WorkspaceItem[] } }).__PLATFORM_STATE__?.workspaceItems || [];
    return workspaceItems.find((item: WorkspaceItem) => item.id === projectId && item.type === 'folder') || null;
  }

  /**
   * –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  public attachContext(contextButton: ChatContextButton): void {
    window.dispatchEvent(new CustomEvent('chat:attach-context', {
      detail: contextButton
    }));
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  public detachContext(id: string): void {
    window.dispatchEvent(new CustomEvent('chat:detach-context', {
      detail: { id }
    }));
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  public getContext(): ChatContext {
    return { ...this.context };
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  public subscribe(listener: (context: ChatContext) => void): () => void {
    this.listeners.add(listener);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø–∏—Å–∫–∏
    return () => {
      this.listeners.delete(listener);
    };
  }

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª–µ–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
   */
  private notifyListeners(): void {
    this.listeners.forEach(listener => {
      try {
        listener(this.getContext());
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ —Å–ª—É—à–∞—Ç–µ–ª–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–∞—Ç–∞:', error);
      }
    });
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  public clearContext(): void {
    this.context.attachedItems = [];
    this.context.activeProject = undefined;
    this.context.activeDocument = undefined;
    this.context.userLocation = 'workspace';
    this.notifyListeners();
    console.log('–ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è AI Brain
   */
  public getContextForAI(): {
    attachedItems: ChatContextButton[];
    activeProject?: { id: string; title: string };
    userLocation: string;
    contextSummary: string;
  } {
    const contextSummary = this.generateContextSummary();

    return {
      attachedItems: this.context.attachedItems,
      activeProject: this.context.activeProject,
      userLocation: this.context.userLocation,
      contextSummary
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è AI
   */
  private generateContextSummary(): string {
    const parts: string[] = [];

    if (this.context.activeProject) {
      parts.push(`–ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç: ${this.context.activeProject.title}`);
    }

    if (this.context.attachedItems.length > 0) {
      const items = this.context.attachedItems.map(item => `${item.type}: ${item.title}`).join(', ');
      parts.push(`–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: ${items}`);
    }

    parts.push(`–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${this.context.userLocation}`);

    return parts.join(' | ');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
export const chatContextService = new ChatContextService();
