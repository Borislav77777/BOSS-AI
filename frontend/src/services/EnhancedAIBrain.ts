/**
 * üß† ENHANCED AI BRAIN - –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–∑–≥ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
 *
 * –£–ª—É—á—à–µ–Ω–∏—è:
 * - –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π
 * - –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
 * - –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
 * - –£–º–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π
 */

import { Message } from '@/types';
import { serviceManager } from './ServiceManager';

export interface EnhancedChatContext {
  activeService: string | null;
  activeSection: string;
  conversationHistory: Message[];
  userPreferences: Record<string, unknown>;
  lastActivity: Date;
  serviceCapabilities: Map<string, ServiceCapability[]>;
  userIntentHistory: IntentHistory[];
}

export interface ServiceCapability {
  serviceId: string;
  capability: string;
  confidence: number;
  keywords: string[];
  examples: string[];
}

export interface IntentHistory {
  intent: string;
  serviceId: string;
  success: boolean;
  timestamp: Date;
  confidence: number;
}

export interface EnhancedChatResponse {
  success: boolean;
  message: string;
  data?: unknown;
  serviceId?: string;
  toolId?: string;
  isSystemResponse?: boolean;
  shouldRouteToService?: boolean;
  confidence: number;
  reasoning: string;
  alternatives: ServiceAlternative[];
}

export interface ServiceAlternative {
  serviceId: string;
  confidence: number;
  reason: string;
}

export interface EnhancedAIBrainConfig {
  enableSystemCommands: boolean;
  enableServiceRouting: boolean;
  enableContextAnalysis: boolean;
  enableLearning: boolean;
  maxHistoryLength: number;
  responseTimeout: number;
  confidenceThreshold: number;
  learningRate: number;
}

class EnhancedAIBrainService {
  private config: EnhancedAIBrainConfig = {
    enableSystemCommands: true,
    enableServiceRouting: true,
    enableContextAnalysis: true,
    enableLearning: true,
    maxHistoryLength: 50,
    responseTimeout: 30000,
    confidenceThreshold: 0.7,
    learningRate: 0.1
  };

  private context: EnhancedChatContext = {
    activeService: null,
    activeSection: 'workspace',
    conversationHistory: [],
    userPreferences: {},
    lastActivity: new Date(),
    serviceCapabilities: new Map(),
    userIntentHistory: []
  };

  // –ö—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ—à–µ–Ω–∏—è–º
  private decisionCache: Map<string, {
    isSystemCommand: boolean;
    shouldRouteToService: boolean;
    serviceId?: string;
    toolId?: string;
    confidence: number;
    keywords: string[];
    reasoning: string;
    alternatives: ServiceAlternative[];
  }> = new Map();

  // –ú–∞—Ç—Ä–∏—Ü–∞ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏–π
  private learningMatrix: Map<string, Map<string, number>> = new Map();

  constructor() {
    this.initializeServiceCapabilities();
    this.loadLearningData();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–µ—Ä–≤–∏—Å–æ–≤
   */
  private initializeServiceCapabilities(): void {
    const capabilities: ServiceCapability[] = [
      // ChatGPT —Å–µ—Ä–≤–∏—Å
      {
        serviceId: 'chatgpt-service',
        capability: 'text-generation',
        confidence: 0.9,
        keywords: ['–Ω–∞–ø–∏—à–∏', '—Å–æ–∑–¥–∞–π', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', '—Å–æ—á–∏–Ω–∏', '–ø–µ—Ä–µ–≤–µ–¥–∏', '–ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π', '–∫—Ä–∞—Ç–∫–æ', '–ø–æ–¥–≤–µ–¥–∏ –∏—Ç–æ–≥'],
        examples: ['–ù–∞–ø–∏—à–∏ –ø–∏—Å—å–º–æ', '–ü–µ—Ä–µ–≤–µ–¥–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π', '–°–æ–∑–¥–∞–π –ø–ª–∞–Ω –ø—Ä–æ–µ–∫—Ç–∞']
      },
      {
        serviceId: 'chatgpt-service',
        capability: 'code-generation',
        confidence: 0.8,
        keywords: ['–∫–æ–¥', '—Ñ—É–Ω–∫—Ü–∏—è', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '–∞–ª–≥–æ—Ä–∏—Ç–º', 'debug', '–∏—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫—É'],
        examples: ['–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞ Python', '–ò—Å–ø—Ä–∞–≤—å –æ—à–∏–±–∫—É –≤ –∫–æ–¥–µ', '–°–æ–∑–¥–∞–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏']
      },

      // Settings —Å–µ—Ä–≤–∏—Å
      {
        serviceId: 'settings',
        capability: 'theme-management',
        confidence: 0.95,
        keywords: ['—Ç–µ–º–∞', '—Ü–≤–µ—Ç', '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏', '–≤–Ω–µ—à–Ω–∏–π –≤–∏–¥', '—Ç–µ–º–Ω–∞—è', '—Å–≤–µ—Ç–ª–∞—è'],
        examples: ['–ò–∑–º–µ–Ω–∏ —Ç–µ–º—É', '–ù–∞—Å—Ç—Ä–æ–π —Ü–≤–µ—Ç–∞', '–ü–µ—Ä–µ–∫–ª—é—á–∏ –Ω–∞ —Ç–µ–º–Ω—É—é —Ç–µ–º—É']
      },
      {
        serviceId: 'settings',
        capability: 'preferences',
        confidence: 0.9,
        keywords: ['–Ω–∞—Å—Ç—Ä–æ–π–∫–∏', '–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è', '–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', '–ø–∞—Ä–∞–º–µ—Ç—Ä—ã'],
        examples: ['–û—Ç–∫—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', '–ò–∑–º–µ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã', '–ù–∞—Å—Ç—Ä–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å']
      },

      // File Manager —Å–µ—Ä–≤–∏—Å
      {
        serviceId: 'file-manager',
        capability: 'file-operations',
        confidence: 0.9,
        keywords: ['—Ñ–∞–π–ª', '–ø–∞–ø–∫–∞', '–∑–∞–≥—Ä—É–∑–∏—Ç—å', '—Å–∫–∞—á–∞—Ç—å', '—É–¥–∞–ª–∏—Ç—å', '–ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å'],
        examples: ['–ó–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª', '–°–æ–∑–¥–∞–π –ø–∞–ø–∫—É', '–£–¥–∞–ª–∏ —Ñ–∞–π–ª']
      }
    ];

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
    capabilities.forEach(cap => {
      if (!this.context.serviceCapabilities.has(cap.serviceId)) {
        this.context.serviceCapabilities.set(cap.serviceId, []);
      }
      this.context.serviceCapabilities.get(cap.serviceId)!.push(cap);
    });
  }

  /**
   * –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
   */
  private async analyzeIntentEnhanced(message: string): Promise<{
    isSystemCommand: boolean;
    shouldRouteToService: boolean;
    serviceId?: string;
    toolId?: string;
    confidence: number;
    keywords: string[];
    reasoning: string;
    alternatives: ServiceAlternative[];
  }> {
    const lowerMessage = message.toLowerCase();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const systemCommands = ['/help', '/settings', '/clear', '/reset', '/status'];
    const isSystemCommand = systemCommands.some(cmd => lowerMessage.startsWith(cmd));

    if (isSystemCommand) {
      return {
        isSystemCommand: true,
        shouldRouteToService: false,
        confidence: 1.0,
        keywords: [],
        reasoning: '–°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞',
        alternatives: []
      };
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const intentAnalysis = await this.performContextualAnalysis(message);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏–π
    const learnedDecision = this.applyLearning(intentAnalysis);

    return learnedDecision;
  }

  /**
   * –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
   */
  private async performContextualAnalysis(message: string): Promise<{
    isSystemCommand: boolean;
    shouldRouteToService: boolean;
    serviceId?: string;
    toolId?: string;
    confidence: number;
    keywords: string[];
    reasoning: string;
    alternatives: ServiceAlternative[];
  }> {
    const lowerMessage = message.toLowerCase();
    const candidates: Array<{
      serviceId: string;
      capability: ServiceCapability;
      score: number;
      matchedKeywords: string[];
    }> = [];

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
    for (const [serviceId, capabilities] of this.context.serviceCapabilities) {
      for (const capability of capabilities) {
        const matchedKeywords = capability.keywords.filter(keyword =>
          lowerMessage.includes(keyword)
        );

        if (matchedKeywords.length > 0) {
          const score = (matchedKeywords.length / capability.keywords.length) * capability.confidence;
          candidates.push({
            serviceId,
            capability,
            score,
            matchedKeywords
          });
        }
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    candidates.sort((a, b) => b.score - a.score);

    if (candidates.length === 0) {
      return {
        isSystemCommand: false,
        shouldRouteToService: false,
        confidence: 0,
        keywords: [],
        reasoning: '–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤',
        alternatives: []
      };
    }

    const bestMatch = candidates[0];
    const alternatives = candidates.slice(1, 3).map(c => ({
      serviceId: c.serviceId,
      confidence: c.score,
      reason: `–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${c.matchedKeywords.join(', ')}`
    }));

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
    let toolId: string | undefined;
    if (bestMatch.serviceId === 'chatgpt-service') {
      toolId = this.determineChatGPTTool(lowerMessage);
    } else if (bestMatch.serviceId === 'settings') {
      toolId = this.determineSettingsTool(lowerMessage);
    }

    return {
      isSystemCommand: false,
      shouldRouteToService: bestMatch.score >= this.config.confidenceThreshold,
      serviceId: bestMatch.serviceId,
      toolId,
      confidence: bestMatch.score,
      keywords: bestMatch.matchedKeywords,
      reasoning: `–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å ${bestMatch.serviceId}: ${bestMatch.matchedKeywords.join(', ')}`,
      alternatives
    };
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ ChatGPT
   */
  private determineChatGPTTool(message: string): string {
    if (message.includes('–ø–µ—Ä–µ–≤–µ–¥–∏') || message.includes('translate')) {
      return 'translate-chatgpt';
    } else if (message.includes('–∫—Ä–∞—Ç–∫–æ') || message.includes('summary')) {
      return 'summarize-text';
    } else if (message.includes('–ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å') || message.includes('rewrite')) {
      return 'text-rewrite';
    } else if (message.includes('–∫–æ–¥') || message.includes('–ø—Ä–æ–≥—Ä–∞–º–º–∞')) {
      return 'code-generation';
    } else {
      return 'chat-completion';
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  private determineSettingsTool(message: string): string {
    if (message.includes('—Ç–µ–º–∞') || message.includes('—Ü–≤–µ—Ç')) {
      return 'theme-settings';
    } else if (message.includes('—è–∑—ã–∫') || message.includes('language')) {
      return 'language-settings';
    } else {
      return 'general-settings';
    }
  }

  /**
   * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏–π
   */
  private applyLearning(analysis: {
    isSystemCommand: boolean;
    shouldRouteToService: boolean;
    serviceId?: string;
    toolId?: string;
    confidence: number;
    keywords: string[];
    reasoning: string;
    alternatives: ServiceAlternative[];
  }): {
    isSystemCommand: boolean;
    shouldRouteToService: boolean;
    serviceId?: string;
    toolId?: string;
    confidence: number;
    keywords: string[];
    reasoning: string;
    alternatives: ServiceAlternative[];
  } {
    const messageKey = this.generateMessageKey(analysis.keywords);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (this.decisionCache.has(messageKey)) {
      const cached = this.decisionCache.get(messageKey)!;
      cached.reasoning += ' (–∏–∑ –∫—ç—à–∞)';
      return cached;
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞—Ç—Ä–∏—Ü—É –æ–±—É—á–µ–Ω–∏—è
    if (this.learningMatrix.has(messageKey)) {
      const learningData = this.learningMatrix.get(messageKey)!;
      const bestService = Array.from(learningData.entries())
        .sort(([,a], [,b]) => b - a)[0];

      if (bestService && bestService[1] > analysis.confidence) {
        analysis.serviceId = bestService[0];
        analysis.confidence = bestService[1];
        analysis.reasoning += ' (—É–ª—É—á—à–µ–Ω–æ –æ–±—É—á–µ–Ω–∏–µ–º)';
      }
    }

    return analysis;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private generateMessageKey(keywords: string[]): string {
    return keywords.sort().join('|');
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è
   */
  private loadLearningData(): void {
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage –∏–ª–∏ API
    const savedData = localStorage.getItem('ai-brain-learning');
    if (savedData) {
      try {
        const data = JSON.parse(savedData);
        this.learningMatrix = new Map(data);
      } catch (error) {
        console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è:', error);
      }
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è
   */
  private saveLearningData(): void {
    try {
      const data = Array.from(this.learningMatrix.entries());
      localStorage.setItem('ai-brain-learning', JSON.stringify(data));
    } catch (error) {
      console.warn('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è:', error);
    }
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async processMessage(
    message: string,
    currentService: string | null = null,
    currentSection: string = 'workspace'
  ): Promise<EnhancedChatResponse> {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
      this.updateContext(currentService, currentSection);

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏—è
      const intent = await this.analyzeIntentEnhanced(message);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
      if (intent.isSystemCommand) {
        return await this.handleSystemCommand(message, intent);
      }

      // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º –∫ —Å–µ—Ä–≤–∏—Å—É
      if (intent.shouldRouteToService && intent.serviceId) {
        const response = await this.routeToService(message, {
          serviceId: intent.serviceId,
          toolId: intent.toolId,
          shouldRouteToService: intent.shouldRouteToService
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        const messageKey = this.generateMessageKey(intent.keywords);
        this.decisionCache.set(messageKey, {
          isSystemCommand: intent.isSystemCommand,
          shouldRouteToService: intent.shouldRouteToService,
          serviceId: intent.serviceId,
          toolId: intent.toolId,
          confidence: intent.confidence,
          keywords: intent.keywords,
          reasoning: intent.reasoning,
          alternatives: intent.alternatives
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç—Ä–∏—Ü—É –æ–±—É—á–µ–Ω–∏—è
        this.updateLearningMatrix(messageKey, intent.serviceId, response.success);

        return response;
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å
      return await this.handleGeneralQuery(message, intent);

    } catch (error) {
      console.error('Enhanced AI Brain error:', error);
      return {
        success: false,
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
        isSystemResponse: true,
        confidence: 0,
        reasoning: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
        alternatives: []
      };
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –æ–±—É—á–µ–Ω–∏—è
   */
  private updateLearningMatrix(messageKey: string, serviceId: string, success: boolean): void {
    if (!this.learningMatrix.has(messageKey)) {
      this.learningMatrix.set(messageKey, new Map());
    }

    const serviceMap = this.learningMatrix.get(messageKey)!;
    const currentScore = serviceMap.get(serviceId) || 0;
    const adjustment = success ? this.config.learningRate : -this.config.learningRate;
    const newScore = Math.max(0, Math.min(1, currentScore + adjustment));

    serviceMap.set(serviceId, newScore);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    this.saveLearningData();
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  private updateContext(currentService: string | null, currentSection: string): void {
    this.context.activeService = currentService;
    this.context.activeSection = currentSection;
    this.context.lastActivity = new Date();
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
   */
  private async handleSystemCommand(_message: string, _intent: { [key: string]: unknown }): Promise<EnhancedChatResponse> {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    return {
      success: true,
      message: '–°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞',
      isSystemResponse: true,
      confidence: 1.0,
      reasoning: '–°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞',
      alternatives: [] as ServiceAlternative[]
    };
  }

  /**
   * –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫ —Å–µ—Ä–≤–∏—Å—É
   */
  private async routeToService(message: string, intent: { serviceId: string; toolId?: string; [key: string]: unknown }): Promise<EnhancedChatResponse> {
    try {
      const result = await serviceManager.executeChatButton(intent.serviceId, {
        id: intent.toolId || 'default',
        name: 'AI Request',
        icon: 'Brain',
        description: message,
        action: intent.toolId || 'default',
        isEnabled: true
      });

      return {
        success: true,
        message: typeof result === 'string' ? result : '–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
        serviceId: intent.serviceId,
        toolId: intent.toolId,
        shouldRouteToService: true,
        confidence: (intent.confidence as number) || 0.8,
        reasoning: (intent.reasoning as string) || '–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å–µ—Ä–≤–∏—Å–æ–º',
        alternatives: (intent.alternatives as ServiceAlternative[]) || []
      };
    } catch (error) {
      return {
        success: false,
        message: '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞',
        confidence: 0,
        reasoning: '–û—à–∏–±–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏',
        alternatives: []
      };
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  private async handleGeneralQuery(message: string, intent: { [key: string]: unknown }): Promise<EnhancedChatResponse> {
    return {
      success: true,
      message: '–û–±—â–∏–π –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω',
      confidence: 0.5,
      reasoning: '–û–±—â–∏–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏',
      alternatives: (intent.alternatives as ServiceAlternative[]) || []
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è
   */
  getLearningStats(): {
    totalDecisions: number;
    averageConfidence: number;
    serviceDistribution: Record<string, number>;
  } {
    const totalDecisions = this.decisionCache.size;
    let totalConfidence = 0;
    const serviceDistribution: Record<string, number> = {};

    for (const response of this.decisionCache.values()) {
      totalConfidence += response.confidence;
      if (response.serviceId) {
        serviceDistribution[response.serviceId] = (serviceDistribution[response.serviceId] || 0) + 1;
      }
    }

    return {
      totalDecisions,
      averageConfidence: totalDecisions > 0 ? totalConfidence / totalDecisions : 0,
      serviceDistribution
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
export const enhancedAIBrain = new EnhancedAIBrainService();
