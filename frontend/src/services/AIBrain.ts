/**
 * üß† AI BRAIN - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –º–æ–∑–≥ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
 *
 * –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
 * - –ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * - –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å–µ—Ä–≤–∏—Å–∞–º
 * - –û–±—Ä–∞–±–æ—Ç–∫—É —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
 */

import { Message } from '@/types';
import { chatContextService } from './ChatContextService';
import { serviceManager } from './ServiceManager';

export interface ChatContext {
  activeService: string | null;
  activeSection: string;
  conversationHistory: Message[];
  userPreferences: Record<string, unknown>;
  lastActivity: Date;
}

export interface ChatContextForAI {
  attachedItems: Array<{
    type: string;
    title: string;
    content?: string;
  }>;
  activeProject?: {
    title: string;
  };
  contextSummary?: string;
}

export interface ChatResponse {
  success: boolean;
  message: string;
  data?: unknown;
  serviceId?: string;
  toolId?: string;
  isSystemResponse?: boolean;
  shouldRouteToService?: boolean;
}

export interface AIBrainConfig {
  enableSystemCommands: boolean;
  enableServiceRouting: boolean;
  enableContextAnalysis: boolean;
  maxHistoryLength: number;
  responseTimeout: number;
}

class AIBrainService {
  private config: AIBrainConfig = {
    enableSystemCommands: true,
    enableServiceRouting: true,
    enableContextAnalysis: true,
    maxHistoryLength: 50,
    responseTimeout: 30000
  };

  private context: ChatContext = {
    activeService: null,
    activeSection: 'workspace',
    conversationHistory: [],
    userPreferences: {},
    lastActivity: new Date()
  };

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async processMessage(
    message: string,
    currentService: string | null = null,
    currentSection: string = 'workspace'
  ): Promise<ChatResponse> {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
      this.updateContext(currentService, currentSection);

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const chatContext = chatContextService.getContextForAI();

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      const intent = await this.analyzeIntentWithContext(message, chatContext);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
      if (this.config.enableSystemCommands && intent.isSystemCommand) {
        return await this.handleSystemCommand(message, intent);
      }

      // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º –∫ —Å–µ—Ä–≤–∏—Å—É
      if (this.config.enableServiceRouting && intent.shouldRouteToService && intent.serviceId) {
        return await this.routeToService(message, {
          serviceId: intent.serviceId,
          toolId: intent.toolId,
          shouldRouteToService: intent.shouldRouteToService
        });
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
      return await this.handleGeneralQueryWithContext(message, intent, chatContext);

    } catch (error) {
      console.error('AI Brain error:', error);
      return {
        success: false,
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
        isSystemResponse: true
      };
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  private async analyzeIntentWithContext(message: string, chatContext: ChatContextForAI): Promise<{
    isSystemCommand: boolean;
    shouldRouteToService: boolean;
    serviceId?: string;
    toolId?: string;
    confidence: number;
    keywords: string[];
  }> {
    // –°–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
    const baseIntent = await this.analyzeIntent(message);

    // –£—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞
    if (chatContext.attachedItems.length > 0) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –ø–æ–≤—ã—à–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–µ—Ä–≤–∏—Å–æ–≤
      baseIntent.confidence = Math.min(baseIntent.confidence + 0.2, 1.0);

      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º –∫ AI Assistant
      if (chatContext.attachedItems.some((item) => item.type === 'document')) {
        if (!baseIntent.serviceId) {
          baseIntent.serviceId = 'ai-assistant';
          baseIntent.shouldRouteToService = true;
        }
      }
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ–µ–∫—Ç–µ, —É—á–∏—Ç—ã–≤–∞–µ–º —ç—Ç–æ
    if (chatContext.activeProject) {
      baseIntent.keywords.push(`–ø—Ä–æ–µ–∫—Ç:${chatContext.activeProject.title}`);
    }

    return baseIntent;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private async analyzeIntent(message: string): Promise<{
    isSystemCommand: boolean;
    shouldRouteToService: boolean;
    serviceId?: string;
    toolId?: string;
    confidence: number;
    keywords: string[];
  }> {
    const lowerMessage = message.toLowerCase();
    const keywords = this.extractKeywords(lowerMessage);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const systemCommands = [
      '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings', '–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', 'config',
      '–ø–æ–º–æ—â—å', 'help', '—Å–ø—Ä–∞–≤–∫–∞', '–∫–æ–º–∞–Ω–¥—ã',
      '–≤—ã—Ö–æ–¥', 'exit', '–∑–∞–∫—Ä—ã—Ç—å', 'close',
      '–æ—á–∏—Å—Ç–∏—Ç—å', 'clear', '—Å–±—Ä–æ—Å', 'reset'
    ];

    const isSystemCommand = systemCommands.some(cmd => lowerMessage.includes(cmd));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
    const serviceCommands = [
      { service: 'chatgpt-service', keywords: ['chatgpt', 'gpt', 'openai', '–∏–∏', 'ai', '—á–∞—Ç', '–ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å', 'rewrite', '–∫—Ä–∞—Ç–∫–æ', 'summary', '–ø–µ—Ä–µ–≤–µ—Å—Ç–∏', 'translate'] },
      { service: 'settings', keywords: ['–Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings', '–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', 'config', '—Ç–µ–º–∞', 'theme', '—Ü–≤–µ—Ç', 'color', '–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', 'interface', '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 'notifications'] },
      { service: 'whisper-service', keywords: ['–≥–æ–ª–æ—Å', 'voice', '–º–∏–∫—Ä–æ—Ñ–æ–Ω', 'mic', '–≥–æ–≤–æ—Ä–∏—Ç—å', 'speak', '—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è', 'transcription', '–∑–∞–ø–∏—Å–∞—Ç—å', 'record'] },
      { service: 'ai-assistant', keywords: ['–ø–æ–º–æ—â—å', 'help', '–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç', 'assistant'] }
    ];

    let shouldRouteToService = false;
    let serviceId: string | undefined;
    let toolId: string | undefined;
    let confidence = 0;

    for (const service of serviceCommands) {
      const matchCount = service.keywords.filter(keyword =>
        lowerMessage.includes(keyword)
      ).length;

      if (matchCount > 0) {
        const serviceConfidence = matchCount / service.keywords.length;
        if (serviceConfidence > confidence) {
          confidence = serviceConfidence;
          serviceId = service.service;
          shouldRouteToService = true;

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
          if (service.service === 'chatgpt-service') {
            if (lowerMessage.includes('–ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å') || lowerMessage.includes('rewrite')) {
              toolId = 'text-rewrite';
            } else if (lowerMessage.includes('–∫—Ä–∞—Ç–∫–æ') || lowerMessage.includes('summary')) {
              toolId = 'summarize-text';
            } else if (lowerMessage.includes('–ø–µ—Ä–µ–≤–µ—Å—Ç–∏') || lowerMessage.includes('translate')) {
              toolId = 'translate-chatgpt';
            } else {
              toolId = 'chat-completion';
            }
          } else if (service.service === 'settings') {
            if (lowerMessage.includes('—Ç–µ–º–∞') || lowerMessage.includes('theme')) {
              toolId = 'toggle-theme';
            } else if (lowerMessage.includes('–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å') || lowerMessage.includes('interface')) {
              toolId = 'interface';
            } else if (lowerMessage.includes('—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è') || lowerMessage.includes('notifications')) {
              toolId = 'notifications';
            } else if (lowerMessage.includes('—á–∞—Ç') || lowerMessage.includes('chat')) {
              toolId = 'chat';
            } else if (lowerMessage.includes('–≤–Ω–µ—à–Ω–∏–π –≤–∏–¥') || lowerMessage.includes('appearance')) {
              toolId = 'appearance';
            } else {
              toolId = 'open-preferences';
            }
          } else if (service.service === 'whisper-service') {
            if (lowerMessage.includes('–≥–æ–ª–æ—Å') || lowerMessage.includes('voice') || lowerMessage.includes('–º–∏–∫—Ä–æ—Ñ–æ–Ω') || lowerMessage.includes('mic')) {
              toolId = 'realtime-transcription';
            } else if (lowerMessage.includes('—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è') || lowerMessage.includes('transcription')) {
              toolId = 'audio-transcription';
            } else if (lowerMessage.includes('–∫–æ–º–∞–Ω–¥–∞') || lowerMessage.includes('command')) {
              toolId = 'voice-commands';
            } else {
              toolId = 'realtime-transcription';
            }
          }
        }
      }
    }

    return {
      isSystemCommand,
      shouldRouteToService,
      serviceId,
      toolId,
      confidence,
      keywords
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
   */
  private async handleSystemCommand(
    message: string,
    _intent: { isSystemCommand: boolean; shouldRouteToService: boolean; serviceId?: string; toolId?: string; confidence: number; keywords: string[] }
  ): Promise<ChatResponse> {
    const lowerMessage = message.toLowerCase();

    if (lowerMessage.includes('–ø–æ–º–æ—â—å') || lowerMessage.includes('help')) {
      return {
        success: true,
        message: this.getHelpMessage(),
        isSystemResponse: true
      };
    }

    if (lowerMessage.includes('–æ—á–∏—Å—Ç–∏—Ç—å') || lowerMessage.includes('clear')) {
      this.context.conversationHistory = [];
      return {
        success: true,
        message: '–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞',
        isSystemResponse: true
      };
    }

    if (lowerMessage.includes('–Ω–∞—Å—Ç—Ä–æ–π–∫–∏') || lowerMessage.includes('settings')) {
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ —Å–µ—Ä–≤–∏—Å—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
      return await this.routeToService(message, {
        serviceId: 'settings',
        toolId: 'open-preferences',
        shouldRouteToService: true
      });
    }

    return {
      success: true,
      message: '–°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞',
      isSystemResponse: true
    };
  }

  /**
   * –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫ —Å–µ—Ä–≤–∏—Å—É
   */
  private async routeToService(
    message: string,
    intent: { serviceId: string; toolId?: string; shouldRouteToService: boolean }
  ): Promise<ChatResponse> {
    if (!intent.serviceId) {
      return {
        success: false,
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏',
        isSystemResponse: true
      };
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å
      const service = serviceManager.getService(intent.serviceId);
      if (!service) {
        return {
          success: false,
          message: `–°–µ—Ä–≤–∏—Å ${intent.serviceId} –Ω–µ –Ω–∞–π–¥–µ–Ω`,
          isSystemResponse: true
        };
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ä–≤–∏—Å –µ—Å–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
      if (!service.isLoaded) {
        await serviceManager.loadService(intent.serviceId);
      }

      // –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å–∞
      if (intent.toolId) {
        const result = await serviceManager.executeTool(intent.serviceId, intent.toolId);
        return {
          success: true,
          message: `–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–º ${service.config.name}`,
          data: result,
          serviceId: intent.serviceId,
          toolId: intent.toolId,
          shouldRouteToService: true
        };
      }

      // –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Ç —Ñ—É–Ω–∫—Ü–∏—é
      const chatFunctions = serviceManager.getChatFunctions();
      const chatFunction = chatFunctions.find(f => f.isChatFunction);

      if (chatFunction) {
        const result = await serviceManager.executeTool(intent.serviceId, chatFunction.id);
        return {
          success: true,
          message: `–°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–º ${service.config.name}`,
          data: result,
          serviceId: intent.serviceId,
          toolId: chatFunction.id,
          shouldRouteToService: true
        };
      }

      return {
        success: true,
        message: `–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–º ${service.config.name}`,
        serviceId: intent.serviceId,
        shouldRouteToService: true
      };

    } catch (error) {
      console.error('Service routing error:', error);
      return {
        success: false,
        message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–∏—Å—É: ${error instanceof Error ? error.message : 'Unknown error'}`,
        isSystemResponse: true
      };
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
   */
  private async handleGeneralQueryWithContext(
    message: string,
    intent: { isSystemCommand: boolean; shouldRouteToService: boolean; serviceId?: string; toolId?: string; confidence: number; keywords: string[] },
    chatContext: ChatContextForAI
  ): Promise<ChatResponse> {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (chatContext.attachedItems.length > 0 || chatContext.activeProject) {
      const contextInfo = this.buildContextInfo(chatContext);
      const enhancedMessage = `${message}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n${contextInfo}`;

      // –ü—ã—Ç–∞–µ–º—Å—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫ AI Assistant —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
      try {
        const service = serviceManager.getService('ai-assistant');
        if (service && service.isLoaded) {
          return {
            success: true,
            message: `–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: ${chatContext.contextSummary}`,
            serviceId: 'ai-assistant',
            shouldRouteToService: true,
            data: { enhancedMessage, contextInfo }
          };
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∫ AI Assistant:', error);
      }
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    return await this.handleGeneralQuery(message, intent);
  }

  /**
   * –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
   */
  private buildContextInfo(chatContext: ChatContextForAI): string {
    const parts: string[] = [];

    if (chatContext.activeProject) {
      parts.push(`–ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç: ${chatContext.activeProject.title}`);
    }

    if (chatContext.attachedItems.length > 0) {
      const items = chatContext.attachedItems.map((item) =>
        `${item.type}: ${item.title}${item.content ? `\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: ${item.content.substring(0, 200)}...` : ''}`
      ).join('\n\n');
      parts.push(`–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:\n${items}`);
    }

    return parts.join('\n\n');
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
   */
  private async handleGeneralQuery(
    _message: string,
    _intent: { isSystemCommand: boolean; shouldRouteToService: boolean; serviceId?: string; toolId?: string; confidence: number; keywords: string[] }
  ): Promise<ChatResponse> {
    // –ï—Å–ª–∏ –º—ã –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—â–∏–π –∑–∞–ø—Ä–æ—Å
    if (this.context.activeSection === 'workspace') {
      return {
        success: true,
        message: '–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º –º–æ–∑–≥–æ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
        isSystemResponse: true
      };
    }

    // –ï—Å–ª–∏ –º—ã –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–µ—Ä–≤–∏—Å–µ, –Ω–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
    if (this.context.activeService) {
      return {
        success: true,
        message: `–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–º ${this.context.activeService}`,
        serviceId: this.context.activeService,
        shouldRouteToService: true
      };
    }

    return {
      success: true,
      message: '–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π',
      isSystemResponse: true
    };
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  private updateContext(activeService: string | null, activeSection: string): void {
    this.context.activeService = activeService;
    this.context.activeSection = activeSection;
    this.context.lastActivity = new Date();
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
   */
  private extractKeywords(message: string): string[] {
    // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    const words = message.split(/\s+/).filter(word => word.length > 2);
    return words;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏
   */
  private getHelpMessage(): string {
    return `üß† **BARSUKOV PLATFORM - AI BRAIN**

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

ü§ñ **ChatGPT —Å–µ—Ä–≤–∏—Å**
- "ChatGPT, –ø–æ–º–æ–≥–∏ —Å..." - –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ ChatGPT
- "–ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç" - –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Å –ø–æ–º–æ—â—å—é GPT
- "–ö—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ" - —Å–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ
- "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç" - –ø–µ—Ä–µ–≤–æ–¥ —Å –ø–æ–º–æ—â—å—é GPT

üé§ **Whisper AI (–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥)**
- "–ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥" - –Ω–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥
- "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è" - –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ä–µ—á—å –≤ —Ç–µ–∫—Å—Ç
- "–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã" - –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
- –ù–∞–∂–º–∏—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω –¥–ª—è –∂–∏–≤–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞

‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**
- "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" - –æ—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
- "–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É" - –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
- "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞" - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
- "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π" - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

üìÅ **–†–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ**
- –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–º –º–æ–∑–≥–æ–º
- –£–º–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫ —Å–µ—Ä–≤–∏—Å–∞–º

üîß **–°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã**
- "–ü–æ–º–æ—â—å" - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
- "–û—á–∏—Å—Ç–∏—Ç—å" - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞

üí° **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
1. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
2. AI-–º–æ–∑–≥ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏—è
3. –°–æ–æ–±—â–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ—Ç—Å—è –∫ –Ω—É–∂–Ω–æ–º—É —Å–µ—Ä–≤–∏—Å—É
4. –ü–æ–ª—É—á–∞–µ—Ç–µ –æ—Ç–≤–µ—Ç –æ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞

üéØ **–°–æ–≤–µ—Ç—ã:**
- –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö
- –°–∏—Å—Ç–µ–º–∞ –ø–æ–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
- –ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–∞—Ö`;
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
   */
  addMessageToHistory(message: Message): void {
    this.context.conversationHistory.push(message);

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
    if (this.context.conversationHistory.length > this.config.maxHistoryLength) {
      this.context.conversationHistory = this.context.conversationHistory.slice(-this.config.maxHistoryLength);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  getContext(): ChatContext {
    return { ...this.context };
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  updateConfig(newConfig: Partial<AIBrainConfig>): void {
    this.config = { ...this.config, ...newConfig };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  clearContext(): void {
    this.context = {
      activeService: null,
      activeSection: 'workspace',
      conversationHistory: [],
      userPreferences: {},
      lastActivity: new Date()
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä AI Brain
export const aiBrain = new AIBrainService();
