/**
 * Anti-Procrastination OS - –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
 * –°–∏—Å—Ç–µ–º–∞ –±–æ—Ä—å–±—ã —Å –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ –º–∏–∫—Ä–æ-–¥–µ–π—Å—Ç–≤–∏—è
 */

import React, { useCallback, useEffect, useState } from 'react';
import { localStorageService } from '../../services/antiProcrastination/localStorageService';
import { notificationService } from '../../services/antiProcrastination/notificationService';
import { taskService } from '../../services/antiProcrastination/taskService';
import type { APOSData, Task, TimeBlock } from '../../types/anti-procrastination';
import './AntiProcrastinationService.css';

export const AntiProcrastinationService: React.FC = () => {
    const [data, setData] = useState<APOSData | null>(null);
    const [currentTask, setCurrentTask] = useState<Task | null>(null);
    const [currentBlock, setCurrentBlock] = useState<TimeBlock | null>(null);
    const [timeLeft, setTimeLeft] = useState<number>(0);
    const [newTaskTitle, setNewTaskTitle] = useState('');

    // –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–ª–æ–∫
    const handleBlockComplete = useCallback(() => {
        if (!currentBlock || !currentTask || !data) return;

        const completedBlock = taskService.completeTimeBlock(currentBlock);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
        const updatedTask = {
            ...currentTask,
            timeBlocks: currentTask.timeBlocks.map(b =>
                b.id === currentBlock.id ? completedBlock : b
            ),
        };

        setData({
            ...data,
            tasks: data.tasks.map(t => t.id === currentTask.id ? updatedTask : t),
            completedBlocks: [...data.completedBlocks, completedBlock],
        });

        notificationService.notifyBlockComplete(
            completedBlock.title,
            completedBlock.actualDuration
        );

        // –ü–µ—Ä–µ—Ä—ã–≤
        notificationService.notifyBreak(5);

        setTimeout(() => {
            startNextBlock(updatedTask);
        }, 5000);
    }, [currentBlock, currentTask, data]);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    useEffect(() => {
        const initialData = localStorageService.init();
        setData(initialData);
        setCurrentBlock(initialData.currentBlock);
    }, []);

    // –¢–∞–π–º–µ—Ä
    useEffect(() => {
        if (!currentBlock || currentBlock.status !== 'in_progress') return;

        const interval = setInterval(() => {
            const now = Date.now();
            const end = currentBlock.endTime.getTime();
            const left = Math.max(0, Math.floor((end - now) / 1000));

            setTimeLeft(left);

            if (left === 0) {
                handleBlockComplete();
            }
        }, 1000);

        return () => clearInterval(interval);
    }, [currentBlock, handleBlockComplete]);

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    useEffect(() => {
        if (data) {
            localStorageService.save({
                ...data,
                currentBlock,
            });
        }
    }, [data, currentBlock]);

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    const handleCreateTask = () => {
        if (!newTaskTitle.trim() || !data) return;

        const task = taskService.createTask(newTaskTitle);
        setData({
            ...data,
            tasks: [...data.tasks, task],
        });
        setNewTaskTitle('');
        notificationService.showToast('–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!', 'success');
    };

    // –ù–∞—á–∞—Ç—å –∑–∞–¥–∞—á—É
    const handleStartTask = (task: Task) => {
        setCurrentTask(task);

        // –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if (task.timeBlocks.length === 0) {
            const blocks = taskService.decomposeTask(task, 25);
            const updatedTask = { ...task, timeBlocks: blocks };

            if (data) {
                setData({
                    ...data,
                    tasks: data.tasks.map(t => t.id === task.id ? updatedTask : t),
                });
            }

            setCurrentTask(updatedTask);
        }

        // –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–≤—ã–π –±–ª–æ–∫
        startNextBlock(task);
    };

    // –ù–∞—á–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫
    const startNextBlock = (task: Task) => {
        const nextBlock = task.timeBlocks.find(b => b.status === 'pending');

        if (!nextBlock) {
            notificationService.showToast('–í—Å–µ –±–ª–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!', 'success');
            return;
        }

        const startedBlock = taskService.startTimeBlock(nextBlock);
        setCurrentBlock(startedBlock);
        setTimeLeft(startedBlock.duration * 60);

        notificationService.notifyBlockStart(startedBlock.title, startedBlock.duration);
    };

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
    const formatTime = (seconds: number): string => {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    };

    // –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –∑–∞–¥–∞—á–∏
    const handleHelp = () => {
        notificationService.showToast(
            '–†–∞–∑–±–µ–π—Ç–µ –∑–∞–¥–∞—á—É –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –ø–æ 5-15 –º–∏–Ω—É—Ç –∫–∞–∂–¥—ã–π',
            'info',
            5000
        );
    };

    if (!data) {
        return <div className="apos-loading">–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
    }

    return (
        <div className="apos-container">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <div className="apos-header">
                <h1>‚ö° Anti-Procrastination OS</h1>
                <p>–°–∏—Å—Ç–µ–º–∞ –±–æ—Ä—å–±—ã —Å –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ –º–∏–∫—Ä–æ-–¥–µ–π—Å—Ç–≤–∏—è</p>
            </div>

            {/* –¢–µ–∫—É—â–∏–π –±–ª–æ–∫ */}
            {currentBlock && currentBlock.status === 'in_progress' && (
                <div className="apos-current-block">
                    <h2>üéØ –¢–µ–∫—É—â–∏–π –±–ª–æ–∫</h2>
                    <h3>{currentBlock.title}</h3>
                    <div className="apos-timer">
                        <div className="apos-time">{formatTime(timeLeft)}</div>
                        <div className="apos-progress">
                            <div
                                className={`apos-progress-bar progress-${Math.round(((currentBlock.duration * 60 - timeLeft) / (currentBlock.duration * 60)) * 100)}`}
                            />
                        </div>
                    </div>

                    <div className="apos-micro-actions">
                        <h4>üìã –ú–∏–∫—Ä–æ-–¥–µ–π—Å—Ç–≤–∏—è:</h4>
                        {currentBlock.microActions.map((action) => (
                            <div key={action.id} className={`apos-action ${action.completed ? 'completed' : ''}`}>
                                <input
                                    type="checkbox"
                                    id={`action-${action.id}`}
                                    checked={action.completed}
                                    onChange={() => {
                                        // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–µ–π—Å—Ç–≤–∏—è
                                    }}
                                />
                                <label htmlFor={`action-${action.id}`} className="sr-only">
                                    {action.description}
                                </label>
                                <span>{action.description}</span>
                                <span className="apos-duration">{action.estimatedMinutes} –º–∏–Ω</span>
                            </div>
                        ))}
                    </div>

                    <div className="apos-block-controls">
                        <button onClick={handleBlockComplete} className="apos-btn-complete">
                            ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –±–ª–æ–∫
                        </button>
                    </div>
                </div>
            )}

            {/* –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ */}
            <div className="apos-create-task">
                <h2>‚ûï –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞</h2>
                <div className="apos-input-group">
                    <input
                        type="text"
                        value={newTaskTitle}
                        onChange={(e) => setNewTaskTitle(e.target.value)}
                        placeholder="–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?"
                        onKeyPress={(e) => e.key === 'Enter' && handleCreateTask()}
                    />
                    <button onClick={handleCreateTask}>–°–æ–∑–¥–∞—Ç—å</button>
                </div>
            </div>

            {/* –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á */}
            <div className="apos-tasks">
                <h2>üìù –ó–∞–¥–∞—á–∏</h2>
                {data.tasks.filter(t => t.status !== 'completed').map((task) => (
                    <div key={task.id} className={`apos-task apos-task-${task.priority}`}>
                        <div className="apos-task-header">
                            <h3>{task.title}</h3>
                            <span className="apos-priority">{task.priority}</span>
                        </div>

                        {task.description && (
                            <p className="apos-description">{task.description}</p>
                        )}

                        <div className="apos-task-meta">
                            <span>‚è±Ô∏è {task.estimatedMinutes} –º–∏–Ω</span>
                            <span>üìä {taskService.calculateProgress(task)}%</span>
                        </div>

                        <div className="apos-task-controls">
                            <button
                                onClick={() => handleStartTask(task)}
                                className="apos-btn-start"
                            >
                                ‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å
                            </button>
                            <button
                                onClick={handleHelp}
                                className="apos-btn-help"
                            >
                                üÜò –ü–æ–º–æ—â—å
                            </button>
                        </div>
                    </div>
                ))}
            </div>

            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
            <div className="apos-stats">
                <h2>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
                <div className="apos-stats-grid">
                    <div className="apos-stat">
                        <span className="apos-stat-value">{data.completedBlocks.length}</span>
                        <span className="apos-stat-label">–ë–ª–æ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</span>
                    </div>
                    <div className="apos-stat">
                        <span className="apos-stat-value">
                            {data.tasks.filter(t => t.status === 'completed').length}
                        </span>
                        <span className="apos-stat-label">–ó–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ</span>
                    </div>
                    <div className="apos-stat">
                        <span className="apos-stat-value">
                            {Math.floor(data.completedBlocks.reduce((acc, b) => acc + b.duration, 0) / 60)}
                        </span>
                        <span className="apos-stat-label">–ß–∞—Å–æ–≤ –≤ —Ñ–æ–∫—É—Å–µ</span>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default AntiProcrastinationService;
