/**
 * Ozon Manager API Client Module
 * –ú–æ–¥—É–ª—å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Ozon Manager API
 */

class OzonManagerModule {
  constructor() {
    this.apiUrl = 'http://localhost:4200/api';
    this.isInitialized = false;
    this.authToken = null;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
   */
  async initialize() {
    try {
      console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Ozon Manager –º–æ–¥—É–ª—è...');

      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      await this.authenticate();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
      const healthResponse = await this.makeRequest('GET', '/health');
      if (healthResponse.success) {
        console.log('‚úÖ Ozon Manager API –¥–æ—Å—Ç—É–ø–µ–Ω');
        this.isInitialized = true;
        return true;
      } else {
        console.error('‚ùå Ozon Manager API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Ozon Manager:', error);
      return false;
    }
  }

  /**
   * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ API
   */
  async authenticate() {
    try {
      const response = await fetch(`${this.apiUrl}/auth/token`);
      const result = await response.json();

      if (result.success) {
        this.authToken = result.data.token;
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
        return true;
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', result.error);
        return false;
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      return false;
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ API
   */
  async makeRequest(method, endpoint, data = null) {
    try {
      const url = `${this.apiUrl}${endpoint}`;
      const options = {
        method,
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        }
      };

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (this.authToken) {
        options.headers['Authorization'] = `Bearer ${this.authToken}`;
      }

      if (data && (method === 'POST' || method === 'PUT')) {
        options.body = JSON.stringify(data);
      }

      const response = await fetch(url, options);
      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || `HTTP ${response.status}`);
      }

      return result;
    } catch (error) {
      console.error(`API Error [${method} ${endpoint}]:`, error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ú–ê–ì–ê–ó–ò–ù–ê–ú–ò ===

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤
   */
  async getStores() {
    return this.makeRequest('GET', '/stores');
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω
   */
  async addStore(storeData) {
    return this.makeRequest('POST', '/stores', storeData);
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –º–∞–≥–∞–∑–∏–Ω
   */
  async updateStore(storeName, storeData) {
    return this.makeRequest('PUT', `/stores/${encodeURIComponent(storeName)}`, storeData);
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –º–∞–≥–∞–∑–∏–Ω
   */
  async removeStore(storeName) {
    return this.makeRequest('DELETE', `/stores/${encodeURIComponent(storeName)}`);
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API –º–∞–≥–∞–∑–∏–Ω–∞
   */
  async testStoreConnection(storeName) {
    return this.makeRequest('POST', `/stores/${encodeURIComponent(storeName)}/test-connection`);
  }

  // === –û–ü–ï–†–ê–¶–ò–ò –° –ê–ö–¶–ò–Ø–ú–ò ===

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –Ω–µ–≤—ã–≥–æ–¥–Ω—ã—Ö –∞–∫—Ü–∏–π
   */
  async removeFromPromotions(storeNames) {
    return this.makeRequest('POST', '/promotions/remove', { storeNames });
  }

  // === –û–ü–ï–†–ê–¶–ò–ò –° –ê–†–•–ò–í–û–ú ===

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞–∑–∞—Ä—Ö–∏–≤–∞—Ü–∏—é —Ç–æ–≤–∞—Ä–æ–≤
   */
  async unarchiveProducts(storeNames) {
    return this.makeRequest('POST', '/archive/unarchive', { storeNames });
  }

  // === –ü–õ–ê–ù–ò–†–û–í–©–ò–ö ===

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
   */
  async getSchedulerStatus() {
    return this.makeRequest('GET', '/schedule/status');
  }

  /**
   * –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
   */
  async reloadSchedule() {
    return this.makeRequest('POST', '/schedule/reload');
  }

  // === –õ–û–ì–ò ===

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–∏
   */
  async getLogs() {
    return this.makeRequest('GET', '/logs');
  }

  // === –£–¢–ò–õ–ò–¢–´ ===

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å API
   */
  async checkHealth() {
    return this.makeRequest('GET', '/health');
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥—É–ª–µ
   */
  getModuleInfo() {
    return {
      name: 'Ozon Manager',
      version: '1.0.0',
      description: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏ –Ω–∞ Ozon',
      isInitialized: this.isInitialized,
      apiUrl: this.apiUrl,
      isAuthenticated: !!this.authToken
    };
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç URL API —Å–µ—Ä–≤–µ—Ä–∞
   */
  setApiUrl(url) {
    this.apiUrl = url;
    console.log(`üîß API URL –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${url}`);
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  setAuthToken(token) {
    this.authToken = token;
    console.log('üîë –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥—É–ª—è
export default new OzonManagerModule();
