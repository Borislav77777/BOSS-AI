#!/bin/bash

# üîç –°–∫—Ä–∏–ø—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ Boss AI Platform

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

info() {
    echo -e "${CYAN}[INFO]${NC} $1"
}

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
INTERACTIVE=false
VERBOSE=false
OUTPUT_DIR="/tmp/boss-ai-investigation"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
while [[ $# -gt 0 ]]; do
    case $1 in
        --interactive|-i)
            INTERACTIVE=true
            shift
            ;;
        --verbose|-v)
            VERBOSE=true
            shift
            ;;
        --output|-o)
            OUTPUT_DIR="$2"
            shift 2
            ;;
        --help|-h)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [–æ–ø—Ü–∏–∏]"
            echo "–û–ø—Ü–∏–∏:"
            echo "  --interactive, -i    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º"
            echo "  --verbose, -v        –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
            echo "  --output, -o DIR     –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
            echo "  --help, -h           –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
            exit 0
            ;;
        *)
            error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $1"
            exit 1
            ;;
    esac
done

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞
ask_question() {
    local question="$1"
    local default="$2"
    local answer

    if [ "$INTERACTIVE" = true ]; then
        if [ -n "$default" ]; then
            read -p "$question [$default]: " answer
            echo "${answer:-$default}"
        else
            read -p "$question: " answer
            echo "$answer"
        fi
    else
        echo "$default"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞ –∏–∑–≤–Ω–µ
check_port_external() {
    local port="$1"
    local hostname="$2"

    if command -v nc &> /dev/null; then
        timeout 5 nc -z "$hostname" "$port" 2>/dev/null && echo "true" || echo "false"
    else
        echo "unknown"
    fi
}

# –°–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
mkdir -p "$OUTPUT_DIR"
cd "$OUTPUT_DIR"

log "üîç –ù–∞—á–∏–Ω–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞..."

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
HOSTING_TYPE=""
CONTROL_PANEL=""
FIREWALL_TYPE=""
EXTERNAL_ACCESS=""

# 1. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ —Ö–æ—Å—Ç–∏–Ω–≥–∞ –∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
log "1. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ö–æ—Å—Ç–∏–Ω–≥–∞ –∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞..."

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
if [ "$EUID" -eq 0 ]; then
    ACCESS_LEVEL="root"
    success "–ó–∞–ø—É—â–µ–Ω–æ —Å –ø—Ä–∞–≤–∞–º–∏ root"
elif sudo -n true 2>/dev/null; then
    ACCESS_LEVEL="sudo"
    success "–î–æ—Å—Ç—É–ø–Ω—ã –ø—Ä–∞–≤–∞ sudo"
else
    ACCESS_LEVEL="limited"
    warn "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"
fi

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ö–æ—Å—Ç–∏–Ω–≥–∞
if [ -d "/var/cpanel" ] || [ -d "/usr/local/cpanel" ]; then
    HOSTING_TYPE="shared_cpanel"
    CONTROL_PANEL="cPanel"
    success "–û–±–Ω–∞—Ä—É–∂–µ–Ω cPanel"
elif [ -d "/var/www/clients" ] || [ -d "/usr/local/ispconfig" ]; then
    HOSTING_TYPE="shared_ispconfig"
    CONTROL_PANEL="ISPConfig"
    success "–û–±–Ω–∞—Ä—É–∂–µ–Ω ISPConfig"
elif [ -d "/usr/local/psa" ]; then
    HOSTING_TYPE="shared_plesk"
    CONTROL_PANEL="Plesk"
    success "–û–±–Ω–∞—Ä—É–∂–µ–Ω Plesk"
elif [ -d "/usr/share/webmin" ]; then
    HOSTING_TYPE="vps_webmin"
    CONTROL_PANEL="Webmin"
    success "–û–±–Ω–∞—Ä—É–∂–µ–Ω Webmin"
elif [ "$ACCESS_LEVEL" = "root" ] || [ "$ACCESS_LEVEL" = "sudo" ]; then
    HOSTING_TYPE="vps_full"
    CONTROL_PANEL="none"
    success "VPS —Å –ø–æ–ª–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º"
else
    HOSTING_TYPE="shared_limited"
    CONTROL_PANEL="unknown"
    warn "Shared hosting —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º"
fi

# 2. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
log "2. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞..."

WEB_SERVER=""
NGINX_VERSION=""
APACHE_VERSION=""

if command -v nginx &> /dev/null; then
    NGINX_VERSION=$(nginx -v 2>&1 | cut -d' ' -f3)
    if pgrep nginx > /dev/null; then
        WEB_SERVER="nginx"
        success "Nginx –æ–±–Ω–∞—Ä—É–∂–µ–Ω: $NGINX_VERSION (–∑–∞–ø—É—â–µ–Ω)"
    else
        warn "Nginx —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ($NGINX_VERSION), –Ω–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    fi
fi

if command -v apache2 &> /dev/null; then
    APACHE_VERSION=$(apache2 -v 2>&1 | head -n1 | cut -d' ' -f3)
    if pgrep apache2 > /dev/null; then
        if [ -z "$WEB_SERVER" ]; then
            WEB_SERVER="apache2"
        else
            WEB_SERVER="$WEB_SERVER,apache2"
        fi
        success "Apache2 –æ–±–Ω–∞—Ä—É–∂–µ–Ω: $APACHE_VERSION (–∑–∞–ø—É—â–µ–Ω)"
    else
        warn "Apache2 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ($APACHE_VERSION), –Ω–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω"
    fi
fi

if [ -z "$WEB_SERVER" ]; then
    error "–í–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω!"
    exit 1
fi

# 3. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ firewall
log "3. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ firewall..."

if command -v ufw &> /dev/null; then
    FIREWALL_TYPE="ufw"
    if ufw status | grep -q "Status: active"; then
        success "UFW –∞–∫—Ç–∏–≤–µ–Ω"
        ufw status >> firewall_status.txt
    else
        warn "UFW —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
    fi
elif command -v firewall-cmd &> /dev/null; then
    FIREWALL_TYPE="firewalld"
    if systemctl is-active firewalld &>/dev/null; then
        success "Firewalld –∞–∫—Ç–∏–≤–µ–Ω"
        firewall-cmd --list-all >> firewall_status.txt
    else
        warn "Firewalld —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
    fi
elif command -v iptables &> /dev/null; then
    FIREWALL_TYPE="iptables"
    if iptables -L | grep -q "ACCEPT\|DROP\|REJECT"; then
        success "iptables –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        iptables -L >> firewall_status.txt
    else
        warn "iptables —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –ø—Ä–∞–≤–∏–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    fi
else
    FIREWALL_TYPE="none"
    warn "Firewall –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
fi

# 4. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
log "4. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."

DOCUMENT_ROOT=""
WEB_DIRS=()

# –ü–æ–∏—Å–∫ –∫–æ—Ä–Ω–µ–≤—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
if [ "$WEB_SERVER" = "nginx" ] || [[ "$WEB_SERVER" == *"nginx"* ]]; then
    log "–ü–æ–∏—Å–∫ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π..."
    find /etc/nginx -name "*.conf" -exec grep -l "root" {} \; 2>/dev/null | while read -r file; do
        grep -n "root" "$file" 2>/dev/null | head -5 >> nginx_roots.txt
    done
fi

if [ "$WEB_SERVER" = "apache2" ] || [[ "$WEB_SERVER" == *"apache2"* ]]; then
    log "–ü–æ–∏—Å–∫ Apache –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π..."
    find /etc/apache2 -name "*.conf" -exec grep -l "DocumentRoot" {} \; 2>/dev/null | while read -r file; do
        grep -n "DocumentRoot" "$file" 2>/dev/null | head -5 >> apache_roots.txt
    done
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
for dir in /var/www/html /var/www /home/*/public_html /var/www/boss-ai.online; do
    if [ -d "$dir" ]; then
        WEB_DIRS+=("$dir")
        log "–ù–∞–π–¥–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $dir"
    fi
done

# 5. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ SSL
log "5. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ SSL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."

SSL_CERTIFICATES=()
SSL_DOMAINS=()

if [ -d "/etc/letsencrypt/live" ]; then
    log "Let's Encrypt —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–∞–π–¥–µ–Ω—ã:"
    for cert_dir in /etc/letsencrypt/live/*; do
        if [ -d "$cert_dir" ]; then
            domain=$(basename "$cert_dir")
            SSL_DOMAINS+=("$domain")
            SSL_CERTIFICATES+=("$cert_dir")
            success "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: $domain"
        fi
    done
else
    warn "Let's Encrypt —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö SSL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π
if [ "$WEB_SERVER" = "nginx" ] || [[ "$WEB_SERVER" == *"nginx"* ]]; then
    grep -r "ssl_certificate" /etc/nginx/ 2>/dev/null | head -5 > nginx_ssl.txt
fi

if [ "$WEB_SERVER" = "apache2" ] || [[ "$WEB_SERVER" == *"apache2"* ]]; then
    grep -r "SSLCertificate" /etc/apache2/ 2>/dev/null | head -5 > apache_ssl.txt
fi

# 6. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤
log "6. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤..."

OCCUPIED_PORTS=()
AVAILABLE_PORTS=()

# –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤
while read -r line; do
    port=$(echo "$line" | awk '{print $4}' | cut -d':' -f2)
    if [[ "$port" =~ ^[0-9]+$ ]]; then
        OCCUPIED_PORTS+=("$port")
    fi
done < <(netstat -tlnp 2>/dev/null | grep LISTEN)

# –ù–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø–æ—Ä—Ç—ã –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤
for port in 3000 3001 4000 4200 5000 8000 8001 8080; do
    if [[ ! " ${OCCUPIED_PORTS[@]} " =~ " ${port} " ]]; then
        AVAILABLE_PORTS+=("$port")
    fi
done

log "–ó–∞–Ω—è—Ç—ã–µ –ø–æ—Ä—Ç—ã: ${OCCUPIED_PORTS[*]}"
log "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã: ${AVAILABLE_PORTS[*]}"

# 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤ –∏–∑–≤–Ω–µ
log "7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤..."

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ IP
EXTERNAL_IP=$(curl -s ifconfig.me 2>/dev/null || curl -s ipinfo.io/ip 2>/dev/null || echo "unknown")
if [ "$EXTERNAL_IP" != "unknown" ]; then
    success "–í–Ω–µ—à–Ω–∏–π IP: $EXTERNAL_IP"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤
    for port in 80 443 3000 4200; do
        if [ -f "occupied_ports.txt" ] && grep -q ":$port" occupied_ports.txt; then
            external_access=$(check_port_external "$port" "$EXTERNAL_IP")
            if [ "$external_access" = "true" ]; then
                success "–ü–æ—Ä—Ç $port –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑–≤–Ω–µ"
            elif [ "$external_access" = "false" ]; then
                warn "–ü–æ—Ä—Ç $port –∑–∞–Ω—è—Ç, –Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑–≤–Ω–µ"
            else
                info "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞ $port"
            fi
        fi
    done
else
    warn "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP"
fi

# 8. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ Node.js –∏ PM2
log "8. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ Node.js –æ–∫—Ä—É–∂–µ–Ω–∏—è..."

NODE_VERSION=""
NPM_VERSION=""
PM2_VERSION=""
NODE_APPS=()

if command -v node &> /dev/null; then
    NODE_VERSION=$(node -v)
    success "Node.js: $NODE_VERSION"
else
    warn "Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

if command -v npm &> /dev/null; then
    NPM_VERSION=$(npm -v)
    success "npm: $NPM_VERSION"
else
    warn "npm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

if command -v pm2 &> /dev/null; then
    PM2_VERSION=$(pm2 -v)
    success "PM2: $PM2_VERSION"

    # –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ PM2 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    pm2 list --format json 2>/dev/null > pm2_apps.json || true
else
    warn "PM2 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ Node.js –ø—Ä–æ—Ü–µ—Å—Å—ã
ps aux | grep node | grep -v grep | while read -r line; do
    NODE_APPS+=("$line")
done

# 6. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ .htaccess —Ñ–∞–π–ª–æ–≤
log "6. –ü–æ–∏—Å–∫ .htaccess —Ñ–∞–π–ª–æ–≤..."

HTACCESS_FILES=()
find /var/www -name ".htaccess" 2>/dev/null | while read -r file; do
    HTACCESS_FILES+=("$file")
    log "–ù–∞–π–¥–µ–Ω .htaccess: $file"
done

# 7. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ PHP
log "7. –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ PHP..."

PHP_VERSION=""
if command -v php &> /dev/null; then
    PHP_VERSION=$(php -v | head -n1 | cut -d' ' -f2)
    success "PHP: $PHP_VERSION"
else
    warn "PHP –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# 8. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
log "8. –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞..."

cat > server-config.json << EOF
{
  "investigation_date": "$(date -Iseconds)",
  "web_server": {
    "type": "$WEB_SERVER",
    "nginx_version": "$NGINX_VERSION",
    "apache_version": "$APACHE_VERSION"
  },
  "document_roots": [
    $(printf '"%s",' "${WEB_DIRS[@]}" | sed 's/,$//')
  ],
  "ssl": {
    "certificates": [
      $(printf '"%s",' "${SSL_CERTIFICATES[@]}" | sed 's/,$//')
    ],
    "domains": [
      $(printf '"%s",' "${SSL_DOMAINS[@]}" | sed 's/,$//')
    ]
  },
  "ports": {
    "occupied": [
      $(printf '%s,' "${OCCUPIED_PORTS[@]}" | sed 's/,$//')
    ],
    "available": [
      $(printf '%s,' "${AVAILABLE_PORTS[@]}" | sed 's/,$//')
    ]
  },
  "nodejs": {
    "version": "$NODE_VERSION",
    "npm_version": "$NPM_VERSION",
    "pm2_version": "$PM2_VERSION",
    "pm2_installed": $(command -v pm2 &> /dev/null && echo "true" || echo "false")
  },
  "php": {
    "version": "$PHP_VERSION",
    "installed": $(command -v php &> /dev/null && echo "true" || echo "false")
  },
  "recommendations": {
    "deployment_strategy": "$(if [ ${#AVAILABLE_PORTS[@]} -ge 2 ]; then echo "microservices"; else echo "single_port"; fi)",
    "ssl_strategy": "$(if [ ${#SSL_DOMAINS[@]} -gt 0 ]; then echo "reuse_existing"; else echo "create_new"; fi)",
    "web_server_config": "$(if [ "$WEB_SERVER" = "nginx" ]; then echo "nginx_location_blocks"; else echo "apache_htaccess"; fi)"
  }
}
EOF

# 9. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
log "9. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π..."

cat > recommendations.md << EOF
# üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é Boss AI Platform

## –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

- **–í–µ–±-—Å–µ—Ä–≤–µ—Ä**: $WEB_SERVER
- **Node.js**: $NODE_VERSION
- **PM2**: $PM2_VERSION
- **PHP**: $PHP_VERSION

## –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è

### 1. –†–∞–∑–º–µ—â–µ–Ω–∏–µ

$(if [ ${#SSL_DOMAINS[@]} -gt 0 ]; then
    echo "**–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è**: –ü–æ–¥–¥–æ–º–µ–Ω (app.boss-ai.online)"
    echo "- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"
    echo "- –°–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
else
    echo "**–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è**: –ü–æ–¥–ø–∞–ø–∫–∞ (boss-ai.online/app/)"
    echo "- –ù–µ —Ç—Ä–µ–±—É–µ—Ç SSL –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    echo "- –ü—Ä–æ—Å—Ç–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è"
fi)

### 2. –ü–æ—Ä—Ç—ã –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤

$(if [ ${#AVAILABLE_PORTS[@]} -ge 2 ]; then
    echo "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã**: ${AVAILABLE_PORTS[*]}"
    echo "- API Gateway: ${AVAILABLE_PORTS[0]}"
    echo "- Ozon Manager: ${AVAILABLE_PORTS[1]}"
else
    echo "**–í–Ω–∏–º–∞–Ω–∏–µ**: –ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤"
    echo "- –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—É—Ç—è–º–∏"
fi)

### 3. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞

$(if [ "$WEB_SERVER" = "nginx" ]; then
    echo "**Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è**:"
    echo "- –°–æ–∑–¥–∞—Ç—å location –±–ª–æ–∫–∏"
    echo "- –ù–∞—Å—Ç—Ä–æ–∏—Ç—å proxy_pass"
    echo "- –î–æ–±–∞–≤–∏—Ç—å WebSocket –ø–æ–¥–¥–µ—Ä–∂–∫—É"
else
    echo "**Apache –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è**:"
    echo "- –°–æ–∑–¥–∞—Ç—å .htaccess —Ñ–∞–π–ª"
    echo "- –ù–∞—Å—Ç—Ä–æ–∏—Ç—å mod_proxy"
    echo "- –î–æ–±–∞–≤–∏—Ç—å CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏"
fi)

## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

1. –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏–∑ \`deploy/SERVER_ADAPTATION_GUIDE.md\`
2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å—ã —á–µ—Ä–µ–∑ PM2
4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å

## –§–∞–π–ª—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è

$(if [ "$WEB_SERVER" = "nginx" ]; then
    echo "- \`/etc/nginx/sites-available/app.boss-ai.online\`"
    echo "- \`/etc/nginx/sites-available/boss-ai.online\` (–µ—Å–ª–∏ –ø–æ–¥–ø–∞–ø–∫–∞)"
else
    echo "- \`/var/www/html/boss-ai/.htaccess\`"
    echo "- \`/etc/apache2/sites-available/app.boss-ai.online.conf\`"
fi)

EOF

# 10. –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–ª–∏—Å—Ç–∞
log "10. –°–æ–∑–¥–∞–Ω–∏–µ —á–µ–∫–ª–∏—Å—Ç–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è..."

cat > deployment-checklist.md << EOF
# ‚úÖ –ß–µ–∫–ª–∏—Å—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Boss AI Platform

## –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞

- [ ] –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
- [ ] –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
- [ ] –í—ã–±—Ä–∞–Ω—ã —Å–≤–æ–±–æ–¥–Ω—ã–µ –ø–æ—Ä—Ç—ã
- [ ] –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã

## –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è

- [ ] Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ($NODE_VERSION)
- [ ] npm —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ($NPM_VERSION)
- [ ] PM2 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ($PM2_VERSION)
- [ ] –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è /var/www/boss-ai
- [ ] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞

## –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

- [ ] –ö–æ–¥ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ /var/www/boss-ai
- [ ] –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã (npm run install:all)
- [ ] Frontend —Å–æ–±—Ä–∞–Ω (npm run build)
- [ ] –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
- [ ] PM2 –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞

## –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞

$(if [ "$WEB_SERVER" = "nginx" ]; then
    echo "- [ ] Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞"
    echo "- [ ] –°–∞–π—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (ln -s sites-available sites-enabled)"
    echo "- [ ] Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ (nginx -t)"
    echo "- [ ] Nginx –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω (systemctl reload nginx)"
else
    echo "- [ ] Apache –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞"
    echo "- [ ] mod_proxy –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (a2enmod proxy)"
    echo "- [ ] –°–∞–π—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (a2ensite)"
    echo "- [ ] Apache –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω (systemctl reload apache2)"
fi)

## –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤

- [ ] PM2 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω—ã (pm2 start)
- [ ] PM2 –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (pm2 startup)
- [ ] –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (pm2 save)

## –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

- [ ] API –¥–æ—Å—Ç—É–ø–µ–Ω (curl /api/health)
- [ ] Frontend –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
- [ ] Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç
- [ ] WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç

## SSL (–µ—Å–ª–∏ –ø–æ–¥–¥–æ–º–µ–Ω)

$(if [ ${#SSL_DOMAINS[@]} -gt 0 ]; then
    echo "- [ ] DNS A-–∑–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ (app.boss-ai.online)"
    echo "- [ ] SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω (certbot --expand)"
    echo "- [ ] HTTPS —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    echo "- [ ] SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω (certbot)"
    echo "- [ ] HTTPS –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
fi)

EOF

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
success "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"

echo ""
echo "üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:"
echo "  - /tmp/boss-ai-investigation/server-config.json"
echo "  - /tmp/boss-ai-investigation/recommendations.md"
echo "  - /tmp/boss-ai-investigation/deployment-checklist.md"
echo ""

echo "üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è:"
if [ ${#SSL_DOMAINS[@]} -gt 0 ]; then
    echo "  –ü–æ–¥–¥–æ–º–µ–Ω (app.boss-ai.online) —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º SSL"
else
    echo "  –ü–æ–¥–ø–∞–ø–∫–∞ (boss-ai.online/app/) –±–µ–∑ SSL"
fi

echo ""
echo "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "  1. –ò–∑—É—á–∏—Ç—å recommendations.md"
echo "  2. –°–ª–µ–¥–æ–≤–∞—Ç—å deployment-checklist.md"
echo "  3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å deploy/SERVER_ADAPTATION_GUIDE.md"
echo ""

log "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ! üöÄ"
