import axios, { AxiosInstance, AxiosResponse } from 'axios';
import { OzonAPIResponse, OzonClientConfig } from '../types';
import { Logger } from '../utils/logger';
import { RateLimiterService } from '../utils/rate-limiter';

/**
 * Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Ozon API
 */
const MOCK_DATA = {
  stores: [
    {
      id: 'mock-store-1',
      name: '–¢–µ—Å—Ç–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω',
      status: 'active',
      created_at: '2024-01-01T00:00:00Z'
    }
  ],
  products: [
    {
      id: 12345,
      name: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä',
      price: 1000,
      stock: 10,
      status: 'active'
    }
  ],
  orders: [
    {
      id: 'mock-order-1',
      status: 'delivered',
      total: 1500,
      created_at: '2024-01-15T10:30:00Z'
    }
  ]
};

/**
 * –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Ozon Seller API
 * –ü–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ Python api_client.py
 */
export class OzonAPIClient {
  private client?: AxiosInstance;
  private rateLimiter: RateLimiterService;
  private logger: Logger;
  private recentLimitErrors: number[] = [];

  constructor(
    private config: OzonClientConfig,
    logger?: Logger
  ) {
    this.logger = logger || new Logger();
    this.rateLimiter = new RateLimiterService(50, 1000); // 50 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º mock —Ä–µ–∂–∏–º
    if (process.env.OZON_MOCK_MODE === 'true') {
      this.logger.info('üîß OzonAPIClient –∑–∞–ø—É—â–µ–Ω –≤ MOCK —Ä–µ–∂–∏–º–µ');
      return;
    }

    this.client = axios.create({
      baseURL: config.base_url,
      timeout: config.timeout,
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      }
    });

    this.logger.info(`–°–æ–∑–¥–∞–Ω OzonAPIClient –¥–ª—è Client-Id: ${config.client_id.substring(0, 8)}...`);
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
   */
  private async makeRequest(
    method: 'GET' | 'POST',
    endpoint: string,
    data?: any,
    params?: any
  ): Promise<OzonAPIResponse> {
    // Mock —Ä–µ–∂–∏–º
    if (process.env.OZON_MOCK_MODE === 'true') {
      return this.getMockResponse(endpoint, data);
    }

    if (!this.client) {
      throw new Error('OzonAPIClient –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    await this.rateLimiter.waitIfNeeded(this.config.client_id);

    const url = `${this.config.base_url}${endpoint}`;
    const startTime = Date.now();

    try {
      const headers = {
        'Client-Id': this.config.client_id,
        'Api-Key': this.config.api_key,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      };

      let response: AxiosResponse;
      if (method === 'GET') {
        response = await this.client.get(endpoint, { params, headers });
      } else {
        response = await this.client.post(endpoint, data, { params, headers });
      }

      const responseTime = Date.now() - startTime;

      // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
      this.logger.logApiRequest({
        method,
        url,
        status_code: response.status,
        response_time: responseTime / 1000,
        error: response.status >= 400 ? `HTTP ${response.status}` : undefined
      });

      if (response.status >= 400) {
        throw new Error(`API request failed: ${response.status} - ${JSON.stringify(response.data)}`);
      }

      return {
        success: true,
        data: response.data,
        status_code: response.status
      };

    } catch (error: any) {
      const responseTime = Date.now() - startTime;
      const errorMessage = error.response?.data?.message || error.message || 'Unknown error';

      this.logger.logApiRequest({
        method,
        url,
        status_code: error.response?.status || 0,
        response_time: responseTime / 1000,
        error: errorMessage
      });

      return {
        success: false,
        error: errorMessage,
        status_code: error.response?.status || 0
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ü–∏–π
   */
  async getActions(): Promise<OzonAPIResponse> {
    return this.makeRequest('GET', '/v1/actions');
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∞–∫—Ü–∏–∏
   */
  async getActionProducts(actionId: number, limit: number = 1000, lastId: string = ''): Promise<OzonAPIResponse> {
    const data: any = {
      action_id: actionId,
      limit
    };

    if (lastId) {
      data['last_id'] = lastId;
    }

    return this.makeRequest('POST', '/v1/actions/products', data);
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ –∞–∫—Ü–∏–∏
   */
  async removeProductsFromAction(actionId: number, productIds: number[]): Promise<OzonAPIResponse> {
    if (productIds.length > 100) {
      return {
        success: false,
        error: '–ú–∞–∫—Å–∏–º—É–º 100 —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å'
      };
    }

    const data = {
      action_id: actionId,
      product_ids: productIds.map(id => Number(id))
    };

    return this.makeRequest('POST', '/v1/actions/products/deactivate', data);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
   */
  async getArchivedProducts(limit: number = 1000, lastId: string = ''): Promise<OzonAPIResponse> {
    const data: any = {
      filter: {
        visibility: 'ARCHIVED'
      },
      limit
    };

    if (lastId) {
      data['last_id'] = lastId;
    }

    return this.makeRequest('POST', '/v3/product/list', data);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞–≤—Ç–æ–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
   */
  async getAutoarchivedProducts(limit: number = 1000, lastId: string = ''): Promise<OzonAPIResponse> {
    const data: any = {
      filter: {
        visibility: 'ARCHIVED',
        is_autoarchived: true
      },
      limit
    };

    if (lastId) {
      data['last_id'] = lastId;
    }

    return this.makeRequest('POST', '/v3/product/list', data);
  }

  /**
   * –†–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä—ã
   */
  async unarchiveProducts(productIds: number[]): Promise<OzonAPIResponse> {
    if (productIds.length === 0) {
      return {
        success: false,
        error: '–ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–∞—Ä—Ö–∏–≤–∞—Ü–∏–∏'
      };
    }

    if (productIds.length > 100) {
      return {
        success: false,
        error: `–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç: –º–∞–∫—Å–∏–º—É–º 100 —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ –∑–∞–ø—Ä–æ—Å, –ø–µ—Ä–µ–¥–∞–Ω–æ ${productIds.length}`
      };
    }

    const data = {
      product_id: productIds.map(id => String(id))
    };

    this.logger.info(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–∞—Ä—Ö–∏–≤–∞—Ü–∏—é ${productIds.length} —Ç–æ–≤–∞—Ä–æ–≤`);
    this.logger.info(`ID —Ç–æ–≤–∞—Ä–æ–≤: ${productIds}`);

    return this.makeRequest('POST', '/v1/product/unarchive', data);
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
   */
  async testConnection(): Promise<boolean> {
    try {
      this.logger.info(`–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API –¥–ª—è Client-Id: ${this.config.client_id.substring(0, 8)}...`);

      const data = {
        filter: {},
        limit: 1
      };

      const response = await this.makeRequest('POST', '/v3/product/list', data);

      if (response.success) {
        this.logger.info(`API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ: —Å—Ç–∞—Ç—É—Å ${response.status_code}`);
        return true;
      } else {
        this.logger.error(`API –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.status_code}`);
        return false;
      }
    } catch (error) {
      this.logger.error(`–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: ${error}`);
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±—ã–ª–∏ –ª–∏ –æ—à–∏–±–∫–∏ –ª–∏–º–∏—Ç–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–∏–Ω—É—Ç
   */
  hasRecentLimitError(minutes: number = 5): boolean {
    const currentTime = Date.now();
    const cutoffTime = currentTime - (minutes * 60 * 1000);

    this.recentLimitErrors = this.recentLimitErrors.filter(time => time > cutoffTime);
    return this.recentLimitErrors.length > 0;
  }

  /**
   * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫–∞–∫ –º–æ–º–µ–Ω—Ç –æ—à–∏–±–∫–∏ –ª–∏–º–∏—Ç–∞
   */
  recordLimitError(): void {
    this.recentLimitErrors.push(Date.now());
    if (this.recentLimitErrors.length > 10) {
      this.recentLimitErrors = this.recentLimitErrors.slice(-10);
    }
    this.logger.info(`–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞ –ª–∏–º–∏—Ç–∞ API (–≤—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${this.recentLimitErrors.length})`);
  }

  /**
   * Mock –º–µ—Ç–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  private getMockResponse(endpoint: string, data?: any): OzonAPIResponse {
    this.logger.info(`üîß Mock –æ—Ç–≤–µ—Ç –¥–ª—è ${endpoint}`);
    
    if (endpoint.includes('/v3/product/list')) {
      return {
        success: true,
        status_code: 200,
        data: {
          items: MOCK_DATA.products,
          total: MOCK_DATA.products.length
        }
      };
    }
    
    if (endpoint.includes('/stores')) {
      return {
        success: true,
        status_code: 200,
        data: MOCK_DATA.stores
      };
    }
    
    if (endpoint.includes('/orders')) {
      return {
        success: true,
        status_code: 200,
        data: MOCK_DATA.orders
      };
    }
    
    // –û–±—â–∏–π mock –æ—Ç–≤–µ—Ç
    return {
      success: true,
      status_code: 200,
      data: { message: 'Mock response', endpoint }
    };
  }
}
