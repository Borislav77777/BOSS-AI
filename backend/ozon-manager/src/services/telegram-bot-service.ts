/**
 * TelegramBotService - –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Bot
 *
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ callback queries –æ—Ç Telegram –±–æ—Ç–∞:
 * - /start —Å deep linking –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
 * - Inline –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è—Ç—å" / "–û—Ç–∫–ª–æ–Ω–∏—Ç—å" —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ
 * - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –≤ –ë–î
 *
 * @module services/telegram-bot-service
 */

import TelegramBot from "node-telegram-bot-api";
import { Logger } from "../utils/logger";
import { UserService } from "./user-service";

const logger = new Logger();

export class TelegramBotService {
  private bot: TelegramBot;
  private userService: UserService;

  constructor(token: string, dbPath: string) {
    // Webhook mode - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
    this.bot = new TelegramBot(token, { polling: false });
    this.userService = new UserService(dbPath);

    logger.info("TelegramBotService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ webhook —Ä–µ–∂–∏–º–µ");
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram
   */
  async handleUpdate(update: TelegramBot.Update): Promise<void> {
    try {
      logger.debug("–ü–æ–ª—É—á–µ–Ω update –æ—Ç Telegram:", {
        updateId: update.update_id,
        type: update.message
          ? "message"
          : update.callback_query
          ? "callback_query"
          : "unknown",
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
      if (update.message) {
        await this.handleMessage(update.message);
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries (inline –∫–Ω–æ–ø–∫–∏)
      if (update.callback_query) {
        await this.handleCallbackQuery(update.callback_query);
      }
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram update:", error);
      throw error;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  private async handleMessage(msg: TelegramBot.Message): Promise<void> {
    if (!msg.text) return;

    const chatId = msg.chat.id;
    const text = msg.text;

    logger.debug(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${chatId}: ${text}`);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    if (text.startsWith("/start")) {
      await this.handleStart(msg);
    } else {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥
      await this.bot.sendMessage(
        chatId,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Boss AI!\n\n" +
          "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."
      );
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å deep linking
   */
  private async handleStart(msg: TelegramBot.Message): Promise<void> {
    const chatId = msg.chat.id;
    const text = msg.text || "";
    const telegramId = msg.from?.id;

    if (!telegramId) {
      logger.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å telegram_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è");
      await this.bot.sendMessage(
        chatId,
        "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
      );
      return;
    }

    logger.info(`–û–±—Ä–∞–±–æ—Ç–∫–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}`);

    // –ü–∞—Ä—Å–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: /start auth_{userId}
    const match = text.match(/\/start auth_(\d+)/);
    if (!match) {
      await this.bot.sendMessage(
        chatId,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Boss AI!\n\n" +
          "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."
      );
      return;
    }

    const userId = parseInt(match[1]);
    logger.info(`Deep link: auth_${userId} –æ—Ç telegram_id ${telegramId}`);

    try {
      // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
      const user = this.userService.findByTelegramId(telegramId);

      if (!user) {
        logger.warn(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id ${telegramId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î`);
        await this.bot.sendMessage(
          chatId,
          "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."
        );
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ userId —Å–æ–≤–ø–∞–¥–∞–µ—Ç
      if (user.id !== userId) {
        logger.warn(
          `–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ userId: –æ–∂–∏–¥–∞–ª—Å—è ${userId}, –ø–æ–ª—É—á–µ–Ω ${user.id}`
        );
        await this.bot.sendMessage(
          chatId,
          "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."
        );
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
      if (user.agreed_to_terms) {
        await this.bot.sendMessage(
          chatId,
          "‚úÖ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –ø—Ä–∏–Ω—è—Ç–æ!\n\n" +
            "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É."
        );
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
      await this.sendAgreementMessage(chatId, user.id);
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /start:", error);
      await this.bot.sendMessage(
        chatId,
        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
      );
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
   */
  private async sendAgreementMessage(
    chatId: number,
    userId: number
  ): Promise<void> {
    const message =
      "üìã **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ Boss AI**\n\n" +
      "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n\n" +
      "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö Telegram (ID, –∏–º—è, username, —Ñ–æ—Ç–æ)\n" +
      "‚Ä¢ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö\n" +
      "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞\n" +
      "‚Ä¢ –°–æ–±–ª—é–¥–µ–Ω–∏–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞\n\n" +
      "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: "‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
            callback_data: `agree_yes_${userId}`,
          },
          {
            text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
            callback_data: `agree_no_${userId}`,
          },
        ],
      ],
    };

    await this.bot.sendMessage(chatId, message, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    });

    logger.info(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ callback queries (–Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏)
   */
  private async handleCallbackQuery(
    query: TelegramBot.CallbackQuery
  ): Promise<void> {
    const chatId = query.message?.chat.id;
    const messageId = query.message?.message_id;
    const data = query.data;

    if (!chatId || !messageId || !data) {
      logger.warn("–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ callback query:", {
        chatId,
        messageId,
        data,
      });
      return;
    }

    logger.info(`–û–±—Ä–∞–±–æ—Ç–∫–∞ callback query: ${data} –æ—Ç ${query.from?.id}`);

    try {
      // –ü–∞—Ä—Å–∏–Ω–≥ callback_data: agree_yes_{userId} –∏–ª–∏ agree_no_{userId}
      const match = data.match(/agree_(yes|no)_(\d+)/);
      if (!match) {
        await this.bot.answerCallbackQuery(query.id, {
          text: "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞",
        });
        return;
      }

      const action = match[1]; // 'yes' –∏–ª–∏ 'no'
      const userId = parseInt(match[2]);

      if (action === "yes") {
        await this.handleAgreementAccept(chatId, messageId, userId, query.id);
      } else {
        await this.handleAgreementDecline(chatId, messageId, userId, query.id);
      }
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback query:", error);
      await this.bot.answerCallbackQuery(query.id, {
        text: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
   */
  private async handleAgreementAccept(
    chatId: number,
    messageId: number,
    userId: number,
    callbackQueryId: string
  ): Promise<void> {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –≤ –ë–î
      this.userService.updateAgreement(userId, true);

      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø—Ä–∏–Ω—è–ª —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      await this.bot.answerCallbackQuery(callbackQueryId, {
        text: "‚úÖ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!",
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const newMessage =
        "‚úÖ **–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!**\n\n" +
        "–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å Boss AI.";

      await this.bot.editMessageText(newMessage, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: "Markdown",
      });
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è:", error);
      await this.bot.answerCallbackQuery(callbackQueryId, {
        text: "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
      });
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
   */
  private async handleAgreementDecline(
    chatId: number,
    messageId: number,
    userId: number,
    callbackQueryId: string
  ): Promise<void> {
    try {
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç–∫–ª–æ–Ω–∏–ª —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      await this.bot.answerCallbackQuery(callbackQueryId, {
        text: "‚ùå –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ",
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const newMessage =
        "‚ùå **–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ**\n\n" +
        "–ë–µ–∑ –ø—Ä–∏–Ω—è—Ç–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É Boss AI.\n\n" +
        "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.";

      await this.bot.editMessageText(newMessage, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: "Markdown",
      });
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏—è:", error);
      await this.bot.answerCallbackQuery(callbackQueryId, {
        text: "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
      });
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–ª–∞–Ω—Å–µ
   */
  async sendBalanceNotification(
    telegramId: number,
    balance: number,
    lastTransaction: string
  ): Promise<void> {
    try {
      const message = `üí∞ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω\n\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance.toFixed(
        2
      )} ‚ÇΩ\n–û–ø–µ—Ä–∞—Ü–∏—è: ${lastTransaction}`;

      await this.bot.sendMessage(telegramId, message);
      logger.info(
        `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–∞–ª–∞–Ω—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: telegramId=${telegramId}, balance=${balance}`
      );
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–ª–∞–Ω—Å–µ:", error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤
   */
  async sendLowBalanceWarning(
    telegramId: number,
    balance: number,
    required: number
  ): Promise<void> {
    try {
      const message = `‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance.toFixed(
        2
      )} ‚ÇΩ\n–¢—Ä–µ–±—É–µ—Ç—Å—è: ${required.toFixed(
        2
      )} ‚ÇΩ\n\n–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.`;

      await this.bot.sendMessage(telegramId, message);
      logger.info(
        `–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –±–∞–ª–∞–Ω—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: telegramId=${telegramId}, balance=${balance}`
      );
    } catch (error) {
      logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –±–∞–ª–∞–Ω—Å–µ:", error);
    }
  }

  /**
   * –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  close(): void {
    this.userService.close();
    logger.info("TelegramBotService –∑–∞–∫—Ä—ã—Ç");
  }
}
