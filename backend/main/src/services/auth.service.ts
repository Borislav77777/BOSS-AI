import crypto from "crypto";
import jwt from "jsonwebtoken";
import { ApiResponse, JwtToken, TelegramAuthData, User } from "../types";
import { logger } from "../utils/logger";

/**
 * –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram
 */
export class AuthService {
  private logger = logger;
  private jwtSecret: string;
  private jwtExpiresIn: string;

  constructor() {
    this.jwtSecret = process.env.JWT_SECRET || "default-secret-key";
    this.jwtExpiresIn = process.env.JWT_EXPIRES_IN || "30d";
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
   */
  async initialize(): Promise<void> {
    this.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AuthService...");

    if (!process.env.JWT_SECRET) {
      this.logger.warn(
        "JWT_SECRET –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
      );
    }

    this.logger.info("AuthService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  validateTelegramAuth(authData: TelegramAuthData): boolean {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      if (
        !authData.id ||
        !authData.first_name ||
        !authData.auth_date ||
        !authData.hash
      ) {
        this.logger.warn("–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
      const authTime = authData.auth_date * 1000;
      const now = Date.now();
      const maxAge = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞

      if (now - authTime > maxAge) {
        this.logger.warn("–í—Ä–µ–º—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram –∏—Å—Ç–µ–∫–ª–æ");
        return false;
      }


      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–∞ Telegram Login
      const botToken = process.env.TELEGRAM_BOT_TOKEN;
      if (!botToken) {
        this.logger.warn("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
        return false;
      }

      // –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –û–¢–õ–ê–î–ö–ò
      this.logger.info("üîç –û–¢–õ–ê–î–ö–ê HMAC –í–ê–õ–ò–î–ê–¶–ò–ò", {
        receivedData: authData,
        botTokenLength: botToken.length,
        botTokenStart: botToken.substring(0, 10) + "...",
      });

      const data = { ...authData } as any;
      const checkHash = data.hash;
      delete data.hash;
      const pairs = Object.keys(data)
        .sort()
        .map((k) => `${k}=${data[k]}`)
        .join("\n");

      this.logger.info("üîç HMAC –í–´–ß–ò–°–õ–ï–ù–ò–ï", {
        dataPairs: pairs,
        receivedHash: checkHash,
      });

      const secret = crypto.createHash("sha256").update(botToken).digest();
      const hmacHex = crypto
        .createHmac("sha256", secret)
        .update(pairs)
        .digest("hex");

      this.logger.info("üîç HMAC –†–ï–ó–£–õ–¨–¢–ê–¢", {
        computedHash: hmacHex,
        receivedHash: checkHash,
        hashesMatch: hmacHex === checkHash,
      });

      if (hmacHex !== checkHash) {
        this.logger.warn("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π HMAC Telegram Login", {
          computed: hmacHex,
          received: checkHash,
          difference: hmacHex !== checkHash ? "HASHES DO NOT MATCH" : "UNKNOWN",
        });
        return false;
      }

      this.logger.debug("Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞", {
        userId: authData.id,
        username: authData.username,
      });

      return true;
    } catch (error) {
      this.logger.error("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", error);
      return false;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö Telegram
   */
  createUserFromTelegram(authData: TelegramAuthData): User {
    const userId = `telegram_${authData.id}`;

    return {
      id: userId,
      telegramId: authData.id,
      username: authData.username,
      firstName: authData.first_name,
      lastName: authData.last_name,
      isActive: true,
      createdAt: new Date().toISOString(),
      lastLoginAt: new Date().toISOString(),
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
   */
  generateToken(user: User): JwtToken {
    try {
      const payload = {
        userId: user.id,
        telegramId: user.telegramId,
        username: user.username,
        firstName: user.firstName,
        lastName: user.lastName,
      };

      const accessToken = jwt.sign(payload, this.jwtSecret, {
        expiresIn: this.jwtExpiresIn,
      } as jwt.SignOptions);

      // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
      const decoded = jwt.decode(accessToken) as any;
      const expiresIn = decoded.exp - Math.floor(Date.now() / 1000);

      this.logger.debug("JWT —Ç–æ–∫–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω", {
        userId: user.id,
        expiresIn: expiresIn,
      });

      return {
        accessToken,
        expiresIn,
        tokenType: "Bearer",
      };
    } catch (error) {
      this.logger.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JWT —Ç–æ–∫–µ–Ω–∞", error);
      throw new Error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞");
    }
  }

  /**
   * –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
   */
  verifyToken(token: string): any {
    try {
      const decoded = jwt.verify(token, this.jwtSecret);
      this.logger.debug("JWT —Ç–æ–∫–µ–Ω –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω", {
        userId: (decoded as any).userId,
      });
      return decoded;
    } catch (error) {
      this.logger.warn("–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ JWT —Ç–æ–∫–µ–Ω–∞", error);
      throw error;
    }
  }

  /**
   * Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
   */
  async telegramLogin(authData: TelegramAuthData): Promise<ApiResponse> {
    try {
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      if (!this.validateTelegramAuth(authData)) {
        return {
          success: false,
          error: {
            message: "–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram",
            statusCode: 400,
            timestamp: new Date().toISOString(),
          },
        };
      }

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = this.createUserFromTelegram(authData);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
      const tokenData = this.generateToken(user);

      this.logger.info("–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram", {
        userId: user.id,
        username: user.username,
      });

      this.logger.debug("–í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", {
        user,
        tokenLength: tokenData.accessToken.length,
      });

      return {
        success: true,
        data: {
          user,
          token: tokenData.accessToken,
        },
      };
    } catch (error: any) {
      this.logger.error("–û—à–∏–±–∫–∞ Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", error);
      return {
        success: false,
        error: {
          message: error.message || "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
          statusCode: 500,
          timestamp: new Date().toISOString(),
        },
      };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ —Ç–æ–∫–µ–Ω—É
   */
  async getCurrentUser(token: string): Promise<ApiResponse> {
    try {
      const decoded = this.verifyToken(token);

      const user: User = {
        id: decoded.userId,
        telegramId: decoded.telegramId,
        username: decoded.username,
        firstName: decoded.firstName,
        lastName: decoded.lastName,
        isActive: true,
        createdAt: new Date().toISOString(),
      };

      return {
        success: true,
        data: { user },
      };
    } catch (error: any) {
      this.logger.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", error);
      return {
        success: false,
        error: {
          message: "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω",
          statusCode: 401,
          timestamp: new Date().toISOString(),
        },
      };
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ (refresh)
   */
  async refreshToken(token: string): Promise<ApiResponse> {
    try {
      const decoded = this.verifyToken(token);

      const user: User = {
        id: decoded.userId,
        telegramId: decoded.telegramId,
        username: decoded.username,
        firstName: decoded.firstName,
        lastName: decoded.lastName,
        isActive: true,
        createdAt: new Date().toISOString(),
      };

      const newTokenData = this.generateToken(user);

      return {
        success: true,
        data: { token: newTokenData.accessToken },
      };
    } catch (error: any) {
      this.logger.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞", error);
      return {
        success: false,
        error: {
          message: "–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω",
          statusCode: 401,
          timestamp: new Date().toISOString(),
        },
      };
    }
  }

  /**
   * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
   */
  async logout(userId: string): Promise<ApiResponse> {
    try {
      this.logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã", { userId });

      return {
        success: true,
        data: { message: "–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã" },
      };
    } catch (error: any) {
      this.logger.error("–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã", error);
      return {
        success: false,
        error: {
          message: "–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
          statusCode: 500,
          timestamp: new Date().toISOString(),
        },
      };
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const authService = new AuthService();
